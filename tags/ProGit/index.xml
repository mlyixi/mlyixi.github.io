<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ProGit on mlyixi的博客</title><link>https://mlyixi.github.io/tags/ProGit/</link><description>Recent content in ProGit on mlyixi的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 30 Oct 2014 15:18:52 +0800</lastBuildDate><atom:link href="https://mlyixi.github.io/tags/ProGit/index.xml" rel="self" type="application/rss+xml"/><item><title>ProGit摘要7-工作流</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%817-%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><pubDate>Thu, 30 Oct 2014 15:18:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%817-%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid><description>集中式 类似于集中式版本控制系统(CVCS),Git集中式工作流程使用的也是单点协作模型:一个存放代码仓库的中心服务器,可以接受所有开发者提交的代码. 集中式工作流 如果两个开发者从中心仓库克隆代码下来,同时作了一些修订,那么只有第一个开发者可以顺利地把数据推送到共享服务器。第二个开发</description></item><item><title>ProGit摘要6-子模块</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%816-%E5%AD%90%E6%A8%A1%E5%9D%97/</link><pubDate>Wed, 29 Oct 2014 15:18:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%816-%E5%AD%90%E6%A8%A1%E5%9D%97/</guid><description>托管服务中有好多开发库可以供我们使用,我们怎么将它们引入到我们的项目里面来呢,这就是子模块的概念. 添加 1 git submodule add git://uri directoryName 然后你可以通过git status和.gitmodules查看修改内容及子模块信息. 记得添加后要提交. 克隆 现在我们找到一个项目,但是它包含子模块,我们怎么克隆到本地呢 1</description></item><item><title>ProGit摘要5-托管</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%815-%E6%89%98%E7%AE%A1/</link><pubDate>Wed, 29 Oct 2014 13:18:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%815-%E6%89%98%E7%AE%A1/</guid><description>好了,学了本地/远程仓库,分支和合并/衍合,基本可以拿来运用了.在使用中更能理解嘛. 本地的好说,但是远程的怎么办,没服务器啊. 嗯,这时有公司就提供代码托管服务了,如github,gitcafe,oschina. 一般开放项目(开源)不收费,私有项目(不开源)收费. 首先我们得在这些托</description></item><item><title>ProGit摘要4-衍合</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%814-%E8%A1%8D%E5%90%88/</link><pubDate>Tue, 28 Oct 2014 13:18:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%814-%E8%A1%8D%E5%90%88/</guid><description>之前我们讨论了合并(merge),它会进行一次三头合并. merge to C5 衍合 其实,我们还可以把C3里产生的补丁在C4中再打一遍,这种操作就叫衍合 1 2 git checkout experiment git rebase master 或 1 git rebase [主分支] [特性分支] rebase 确认后,你就可以将之快速合并了 rebase 那么你会问,有区别吗?衍合时也是需要你手动个性补丁的.但是比较两都</description></item><item><title>ProGit摘要3-再议分支</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%813-%E5%86%8D%E8%AE%AE%E5%88%86%E6%94%AF/</link><pubDate>Sat, 25 Oct 2014 13:18:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%813-%E5%86%8D%E8%AE%AE%E5%88%86%E6%94%AF/</guid><description>在之前的介绍中我们讨论了三种分支的情况(短期分支,相当于nightly),但在实际中并不足够. 本地分支 许多开发者喜欢同时拥有多个分支而不仅仅只有一个,比如仅在 master 分支中 保留完全稳定的代码,即已经发布或即将发布的代码。与此同时,他们还有一个名为 develop 或 next 的平行分支,专门用于后续的开发,或</description></item><item><title>ProGit摘要2-远程仓库</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%812-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link><pubDate>Fri, 24 Oct 2014 10:18:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%812-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid><description>上一节中我们介绍了git原理和本地仓库的使用,现在介绍远程仓库的使用 克隆仓库 远程 1 git clone git://uri 本地 1 git clone /path/to/repo/ 这样就克隆了远程仓库origin的所有分支,如origin/master. 注意,本地仓库也有master分支,当然还会有其它分支,但是它们没有仓库名(默认为本地嘛). 查看远程库 1 git</description></item><item><title>ProGit摘要1-本地仓库</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%811-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</link><pubDate>Fri, 24 Oct 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%811-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</guid><description>看了几遍git方便的使用指南,但是由于不经常用,总是忘了,只记得最基本的clone,submodule之类的,完全不够用啊. 现在再看一篇经典著作《Pro Git》,并摘要如下. 书籍地址：https://iissnan.com/progit/ 基本原理 不像其它CVS那样保存差异数据,G</description></item></channel></rss>