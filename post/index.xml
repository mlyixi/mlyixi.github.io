<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on mlyixi的博客</title><link>https://mlyixi.github.io/post/</link><description>Recent content in Posts on mlyixi的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 24 Jan 2021 10:08:52 +0800</lastBuildDate><atom:link href="https://mlyixi.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>git简易服务器</title><link>https://mlyixi.github.io/post/cs/git%E7%AE%80%E6%98%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Sun, 24 Jan 2021 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/git%E7%AE%80%E6%98%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>最近在整理资料，纠结于代码如何备份，最终觉得还是放到git里比较好。 之前使用的gitlab，但web界面太占资源，而且实验室除了我管理外估计也没有其它人用了，所以权限也不用管理(排除gitolite)。所以直接git init --bare走起。 https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server 服务端 添加用户 1 2 3 4 5 sudo adduser git su git cd mkdir .ssh &amp;amp;&amp;amp;</description></item><item><title>DPI工具比较</title><link>https://mlyixi.github.io/post/network/dpi%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83/</link><pubDate>Wed, 20 Jan 2021 09:10:47 +0800</pubDate><guid>https://mlyixi.github.io/post/network/dpi%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83/</guid><description>Independent Comparison of Popular DPI Tools for Traffic Classification 采集工具： https://sourceforge.net/projects/vbsi/files/Release%206/ 数据集： https://cba.upc.edu/monitoring/traffic-classification 数据集好像不公开，可能要通过邮件申请。 摘要： 深度数据包检查（DPI）是用于流量分类的最新技术。按照传统观点，DPI是最准确的分类技术。因此，大多数流行的产品，无论是商业产品还是开源产品，都依赖某种DPI进行流量分类。但是，由于缺乏公共数据集</description></item><item><title>TinyfecVPN</title><link>https://mlyixi.github.io/post/network/tinyfecVPN/</link><pubDate>Fri, 15 Jan 2021 11:25:24 +0800</pubDate><guid>https://mlyixi.github.io/post/network/tinyfecVPN/</guid><description>编译无限制版 1 2 #makefile中改变目标TARGETS=amd64 make nolimit_release 1 2 3 4 5 6 7 8 #Server enable ip forward: echo 1 &amp;gt;/proc/sys/net/ipv4/ip_forward #setup SNAT rule: iptables -t nat -A POSTROUTING -s 10.222.0.0/16 ! -d 10.222.0.0/16 -j MASQUERADE #run tinyfecVPN server ./tinyvpn_amd64 -s -l 0.0.0.0:8855 --sub-net 10.222.2.0 --tun-dev tun100 --report 10 -k 1234 1 2 3 4 5 6 7 #run tinyFecVPN client ./tinyvpn_x86 -c -r 44.55.66.77:8855 --sub-net 10.222.2.0 --tun-dev tun100 --keep-reconnect --report 10 -k 1234 #add route rules ip route add 44.55.66.77/32 via 192.168.99.1 #change 44.55.66.77 to your server ip; 192.168.99.1 to your default gateway. ip route add 0.0.0.0/1 via 10.222.2.1 dev tun100 ip route add 128.0.0.0/1 via 10.222.2.1 dev</description></item><item><title>NFS服务器</title><link>https://mlyixi.github.io/post/linux/NFS%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Thu, 14 Jan 2021 15:42:57 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/NFS%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>服务端 安装 1 2 sudo apt update sudo apt install nfs-kernel-server 配置文件一般不需要更改： 1 2 /etc/default/nfs-kernel-server /etc/default/nfs-common 准备共享目录 1 2 3 |- /srv/nfs4 |- backups |- www 1 2 sudo mount --bind /opt/backups /srv/nfs4/backups sudo mount --bind /var/www /srv/nfs4/www 1 2 3 #/etc/fstab /opt/backups /srv/nfs4/backups none bind 0 0 /var/www /srv/nfs4/www none bind 0 0 共享 1 2 3 4 #/etc/exports /srv/nfs4 192.168.33.0/24(rw,sync,no_subtree_check,crossmnt,fsid=0) /srv/nfs4/backups 192.168.33.0/24(ro,sync,no_subtree_check) 192.168.33.3(rw,sync,no_subtree_check) /srv/nfs4/www 192.168.33.110(rw,sync,no_subtree_check) 指定哪些IP可以进行什么操作，如: 192.168.33.0/24下的所有主机可以在nfs4下读写(rw),</description></item><item><title>IOL_DHCP配置</title><link>https://mlyixi.github.io/post/network/IOL_DHCP%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 11 Jan 2021 14:34:15 +0800</pubDate><guid>https://mlyixi.github.io/post/network/IOL_DHCP%E9%85%8D%E7%BD%AE/</guid><description>初始化设置 刚进入系统会要求设置密码和管理端口，按提示操作即可。 配置网络接口 1 2 3 4 5 6 7 8 9 10 11 Router&amp;gt; enable Router# configure terminal Router(config)# hostname Router Router(config)# enable secret eve Router(config)# no ip domain-lookup Router(config)# interface ethernet 0/1 #这里接口名可能不同，按?查询。 Router(config-if)# ip address 192.168.5.1 255.255.255.0 Router(config-if)# no shutdown Router(config-if)# end Router# write 查看网络接口 1 Router# show interfaces DHCP Server 1 2 3 4 5 6 7 8 9 10 dhcp# configure terminal dhcp(config)# service dhcp dhcp(config)# ip dhcp excluded-address 192.168.5.1 192.168.5.100 //配置dhcp不分</description></item><item><title>Mysql启用远程连接</title><link>https://mlyixi.github.io/post/cs/mysql%E5%90%AF%E7%94%A8%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</link><pubDate>Mon, 11 Jan 2021 14:33:06 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/mysql%E5%90%AF%E7%94%A8%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</guid><description>windows下mysql启用远程连接 打开workbench,在左侧的Users and Privileges标签中将对应用户(root)的From Host值改为% ubuntu下mysql启用远程连接 同上，但还要配置/etc/mysql/mysql.conf.d/mysqld.cnf,注</description></item><item><title>Security_onion与OSSIM比较</title><link>https://mlyixi.github.io/post/network/security_onion%E4%B8%8EOSSIM%E6%AF%94%E8%BE%83/</link><pubDate>Mon, 11 Jan 2021 14:29:48 +0800</pubDate><guid>https://mlyixi.github.io/post/network/security_onion%E4%B8%8EOSSIM%E6%AF%94%E8%BE%83/</guid><description>https://securityonion.readthedocs.io/en/latest/about.html SecurityOnion与OSSIM(也叫AlienVault)对比 I use them both (AV and SO) in parallel, and while they are similar in many respects they both have different strengths. 我同时使用了它们（AV和SO），尽管它们在许多方面都相似，但是两者都有不同的优势。 AlienVault centrally captures and logs a lot of different data from many different data sources: syslog from devices, Windows Event Logs, vulnerability scan results, Snort/Surricata, etc. This itself is not too different from SO, but AV then correlates and cross correlates</description></item><item><title>代码大全</title><link>https://mlyixi.github.io/post/cs/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/</link><pubDate>Mon, 11 Jan 2021 14:19:54 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/</guid><description>软件构建 软件开发活动 定义问题 需求分析 规划构建 软件架构 详细设计 编码与调试 单元测试 集成测试 集成 系统测试 保障维护 软件构建活动 编码与调试 规划构建 详细设计 单元测试 集成测试 集成 形象化比喻 写作: 小程序的可读性. 种植: 每次做一点. 生长: 原型+功能. 建造: 蓝图+施工.设计会根据问题规模而改变. 序列</description></item><item><title>网络空间测绘技术</title><link>https://mlyixi.github.io/post/network/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%B5%8B%E7%BB%98%E6%8A%80%E6%9C%AF/</link><pubDate>Mon, 11 Jan 2021 14:17:37 +0800</pubDate><guid>https://mlyixi.github.io/post/network/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%B5%8B%E7%BB%98%E6%8A%80%E6%9C%AF/</guid><description>网络空间测绘技术 https://www.shodan.io/ https://censys.io/ https://www.zoomeye.org/ https://quake.360.cn/quake/#/index https://fofa.so/ https://gobies.org/ 是软件 技术pk点: 目前功能指标： 端口扫描 元数据采集 目前性能指标： 端口数 协议数 ip数 指纹规则数 问题： 都只是很粗浅的实现了一小部分，点到为止，大量的新的技术并没有能够很好的融入进去。 目标 网络空间测绘就是绘制“网络攻防地图”，说白了也就是一个情报系统，情报系</description></item><item><title>解析超级虚拟实验室eve Ng的工作模式</title><link>https://mlyixi.github.io/post/network/%E8%A7%A3%E6%9E%90%E8%B6%85%E7%BA%A7%E8%99%9A%E6%8B%9F%E5%AE%9E%E9%AA%8C%E5%AE%A4eve-ng%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 11 Jan 2021 13:39:02 +0800</pubDate><guid>https://mlyixi.github.io/post/network/%E8%A7%A3%E6%9E%90%E8%B6%85%E7%BA%A7%E8%99%9A%E6%8B%9F%E5%AE%9E%E9%AA%8C%E5%AE%A4eve-ng%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</guid><description>转载自https://www.douban.com/note/629657625/ 近些年来，基于虚拟环境的网络设备或者实验室层出不穷。其中最为成功的虚拟实验室产品线以iou-web，unetlab，以及后来继承者eve-ng最为成功。因为原UNetlab的环境依旧在更新，因此现有</description></item><item><title>Gnuradio</title><link>https://mlyixi.github.io/post/signal/gnuradio3.8%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/</link><pubDate>Mon, 11 Jan 2021 11:42:12 +0800</pubDate><guid>https://mlyixi.github.io/post/signal/gnuradio3.8%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/</guid><description>https://wiki.gnuradio.org/index.php/TutorialsGDB gnuradio 3.9 gnuradio 3.9竟然这么快就发布了。主要更新： 使用C++14 使用PyBind11替代SWIG Volk作为依赖而不作为子模块存在了 依赖： python3.6.5 numpy 1.13.3 volk 2.4.1 cmake 3.10.2 boost 1.65 Mako 1.0.7 PyBind11 2.4.3 GCC 8.3.0 / Clang 11.0.0 / MSVC 1910（VS2017 15.0) UHD 3.9.7 gnuradio 3.8 gnuradio 3.8同时支持python2和python3, 基于QT5，所以源码编译有些</description></item><item><title>Gnuradio3.7安装说明</title><link>https://mlyixi.github.io/post/signal/gnuradio3.7%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/</link><pubDate>Mon, 11 Jan 2021 11:40:41 +0800</pubDate><guid>https://mlyixi.github.io/post/signal/gnuradio3.7%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/</guid><description>环境要求 ubuntu 16.04/18.04 gnuradio 3.7.11-14 uhd 003.010.001 python 2.7 前置工具和库 1 2 3 4 5 sudo apt install -y cmake git g++ libboost-all-dev libgps-dev \ python-dev python-mako python-numpy python-wxgtk3.0 python-sphinx python-cheetah swig \ libzmq3-dev libfftw3-dev libgsl-dev libcppunit-dev doxygen libcomedi-dev libusb-1.0-0-dev \ libqt4-opengl-dev python-qt4 libqwt-dev libsdl1.2-dev python-gtk2 python-lxml \ pkg-config python-sip-dev liblog4cpp5-dev python-zmq libcanberra-gtk-module uhd安装 1 2 3 4 5 6 7 8 9 10 11 12 13 git clone https://github.com/EttusResearch/uhd cd uhd git tag -l git checkout release_003_010_001_000 cd host mkdir build &amp;amp;&amp;amp; cd build cmake ../ -DENABLE_GPSD=ON make -j $(nproc --all) make test sudo make install &amp;amp;&amp;amp; sudo ldconfig echo &amp;#34;export LD_LIBRARY_PATH=/usr/local/lib&amp;#34;&amp;gt;&amp;gt; ~/.bashrc source ~/.bashrc uhd_find_devices gnuradio安装 1 2 3 4 5 6 7 8 9 10 11</description></item><item><title>Binarygan源码分析</title><link>https://mlyixi.github.io/post/ml/binarygan%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link><pubDate>Mon, 11 Jan 2021 11:38:16 +0800</pubDate><guid>https://mlyixi.github.io/post/ml/binarygan%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid><description>https://github.com/salu133445/binarygan 数据集 使用sharedarray生成数据集，通过 1 python3 ./training_data/load_mnist_to_sa.py ./training_data/mnist/ --merge --binary 其实是将文件存放在了/dev/shm里，默认文件为/dev/shm/_binarized_mnist_x config开发模式 配置项都存放在config.py中了。 版本升级tf1.0-&amp;gt;2.0 将import tensorflow as tf</description></item><item><title>EVE-NG安装使用</title><link>https://mlyixi.github.io/post/network/eve-ng%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 08 Jan 2021 15:42:08 +0800</pubDate><guid>https://mlyixi.github.io/post/network/eve-ng%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid><description>eve-ng是基于ubuntu开发的网络仿真OS.由于eve-ng直接使用dynamips,qemu等虚拟化技术运行官方的固件,所以其仿真能力是最强的,和实物操作没什么分别.特别是网上有很多镜像,包括防火墙,vpn等,应有尽有,作为内网渗透环境来说最好不过了. 版本 eve-ng pro专业版,</description></item><item><title>Win10install</title><link>https://mlyixi.github.io/post/cs/win10install/</link><pubDate>Mon, 04 Jan 2021 16:50:10 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/win10install/</guid><description>准备usb 将usb格式化为fat32,并将win10安装镜像内的文件复制过去. 1.有可能.wim文件过大,进行切割. 1 Dism /Split-Image /ImageFile:D:\sources\install.wim /SWMFile:E:\sources\install.swm /FileSize:3800 U盘直接格式成MBR的FAT32即可,不要将它转成GPT格式.否则会导致各种问题. 引导进入安装 Shift + F10进入命令行. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description></item><item><title>n2n使用</title><link>https://mlyixi.github.io/post/network/n2n%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 04 Jan 2021 14:03:05 +0800</pubDate><guid>https://mlyixi.github.io/post/network/n2n%E4%BD%BF%E7%94%A8/</guid><description>基本概念 n2n是一个L2上基于P2P技术的VPN，实现了IPv4互联网上的一个overlay网络，该网络构建了一个虚拟网桥（虚拟交换机），从而形成一个虚拟局域网。 组织架构 Supernode超级节点：它在edge节点间建立握手，或为位于防火墙之后的节点中转数据。它的基础作用是注册节</description></item><item><title>安全Bash脚本模板</title><link>https://mlyixi.github.io/post/linux/safe-bash-template/</link><pubDate>Thu, 31 Dec 2020 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/safe-bash-template/</guid><description>bash脚本是日常使用和自动化的最常用的编排脚本之一。和python脚本各有优劣，其中bash脚本最主要的一个问题日常命令罗列后如何安全地执行并处理异常，得到自己想要的结果。下面的bash模板就提供了这方面的一些考虑： 原文链接：https://betterdev.blog/min</description></item><item><title>IPv6主机</title><link>https://mlyixi.github.io/post/network/ipv6%E4%B8%BB%E6%9C%BA/</link><pubDate>Wed, 04 Nov 2020 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/network/ipv6%E4%B8%BB%E6%9C%BA/</guid><description>prefixpolicies 发现双栈网络下优先使用ipv6访问网站，查了一下是因为prefixpolicies的配置，默认为RFC3484标准配置。 Windows netsh interface ipv6 show prefixpolicies Linux cat /etc/gai.conf</description></item><item><title>报文和数据包的区别</title><link>https://mlyixi.github.io/post/network/%E6%8A%A5%E6%96%87%E5%92%8C%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Wed, 04 Nov 2020 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/network/%E6%8A%A5%E6%96%87%E5%92%8C%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>应用层——消息(message) 传输层——数据段(segment) 网络层——分组、数据包（packet） 链路层——帧（frame） 物理层——PDU（bit）</description></item><item><title>ubuntu服务器初始配置</title><link>https://mlyixi.github.io/post/linux/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 30 Sep 2020 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/</guid><description>1 2 3 4 5 6 7 sudo vi /etc/cloud/cloud.cfg.d/90_dpkg.cfg sudo apt purge cloud-init snapd nano sudo rm -rf /etc/cloud/ sudo rm -rf /var/lib/cloud/ sudo apt autoremove echo &amp;#34;$USERALL=(ALL:ALL) NOPASSWD: ALL&amp;#34; |sudo tee -a /etc/sudoers echo &amp;#34;set completion-ignore-case on&amp;#34; |sudo tee -a /etc/inputrc 禁用systemd-resolved systemd-resolved不好用，经常将复杂网络配置搞坏，可以考虑禁用掉： 1 2 3 4 systemctl disable systemd-resolved systemctl stop systemd-resolved rm /etc/resolve.conf # 删除符号链接 echo &amp;#34;nameserver 114.114.114.114&amp;#34; &amp;gt; /etc/resolve.conf 网卡 Ubuntu Server 启动时经常卡在:a start job</description></item><item><title>gpg使用</title><link>https://mlyixi.github.io/post/cs/gpg%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 22 Dec 2019 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/gpg%E4%BD%BF%E7%94%A8/</guid><description>PGP和GPG经常搞乱，这里梳理下。 PGP 英文全称为Pretty Good Privacy, 是一个商业软件，由Phil Zimmermann开发，最终被赛门铁克收购，需要付费。 OpenPGP OpenPGP是基于PGP软件的一种协议，定义了加密消息、签名、私钥和用于交换公钥的证书统一标准，RFC4880。 GPG GnuPG是符合</description></item><item><title>aircrack-ng抓包</title><link>https://mlyixi.github.io/post/linux/aircrack-ng%E6%8A%93%E5%8C%85/</link><pubDate>Sun, 30 Dec 2018 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/aircrack-ng%E6%8A%93%E5%8C%85/</guid><description>optional rename interface name: echo &amp;lsquo;SUBSYSTEM==&amp;ldquo;net&amp;rdquo;, ACTION==&amp;ldquo;add&amp;rdquo;, DRIVERS==&amp;quot;?*&amp;quot;, ATTR{address}==&amp;ldquo;02:01:02:03:04:05&amp;rdquo;, ATTR{dev_id}==&amp;ldquo;0x0&amp;rdquo;, ATTR{type}==&amp;ldquo;1&amp;rdquo;, NAME=&amp;ldquo;wlx0&amp;rdquo;'|sudo tee -a /etc/udev/rules.d/70-persistent-net.rules 安装 sudo apt install aircrack-ng start monitor mode sudo airmon-ng start wlx0 [channel] #在信道channel上监听(mon0)，不指定信道全监听但不能用于aireplay sudo airodump-ng mon0 # 监听所有ESS sudo airodum-ng mon0 -c 1 &amp;ndash;bssid bssid #监听ESS下的station,得到mac sudo aireplay-ng -0 1000 -a 7E:F7:E6:C8:0B:E7 -c BC:83:85:EE:35:AB mon0 # 在mon0的信道上进行解关联解认证攻击 start</description></item><item><title>vscode远程编辑</title><link>https://mlyixi.github.io/post/linux/vscode%E8%BF%9C%E7%A8%8B%E7%BC%96%E8%BE%91/</link><pubDate>Sun, 30 Dec 2018 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/vscode%E8%BF%9C%E7%A8%8B%E7%BC%96%E8%BE%91/</guid><description>remote-ssh 微软官方出的remote-ssh用于连接远程服务器，进行远程编辑。 要求 服务端有openssh-server, 客户端有openssh-client.(win/linux/osx)其实都有了。 客户端上安装remote-ssh插件，左侧菜单栏多了个remote-explorer按钮；</description></item><item><title>Linux多网卡</title><link>https://mlyixi.github.io/post/linux/Linux%E5%A4%9A%E7%BD%91%E5%8D%A1/</link><pubDate>Tue, 04 Dec 2018 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/Linux%E5%A4%9A%E7%BD%91%E5%8D%A1/</guid><description>Linux多网卡问题 问题描述 对于多块网卡的电脑，一个使用场景就是：将该电脑视作多个独立的收发系统，但共享一个cpu(多任务OS)。但这对于linux默认是不成立的：linux是一个弱终端系统模型（Weak End System Model)，上述使用场景的OS是一个强终端系统模型(SESM)。 区别是</description></item><item><title>Linux下的nc</title><link>https://mlyixi.github.io/post/linux/Linux%E4%B8%8B%E7%9A%84nc/</link><pubDate>Sun, 04 Nov 2018 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/Linux%E4%B8%8B%E7%9A%84nc/</guid><description>nc nc(netcat)有多个类似的工具 netcat:原版,GNU,目前不支持ipv6 netcat.openbsd:openbsd上的netcat,支持ipv6,需要libbsd0 ncat:nmap项目中的改进,需要nbase,nsock,libpcap等库,支持ipv6 socat</description></item><item><title>理解交换</title><link>https://mlyixi.github.io/post/network/%E7%90%86%E8%A7%A3%E4%BA%A4%E6%8D%A2/</link><pubDate>Sun, 04 Nov 2018 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/network/%E7%90%86%E8%A7%A3%E4%BA%A4%E6%8D%A2/</guid><description>概述 将计算机(网络)互相连接起来要使用一些中间设备，ISO的术语称之为中继（relay）系统。根据中继系统所在的层次，可以有以下五种中继系统： 物理层（即常说的第一层、L1）中继系统，即转发器（repeater/hub）。 数据链路层（即第二层，L2），即网桥或桥接器（bridge）</description></item><item><title>SurfacePro双引导</title><link>https://mlyixi.github.io/post/cs/SurfacePro%E5%8F%8C%E5%BC%95%E5%AF%BC/</link><pubDate>Mon, 03 Sep 2018 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/SurfacePro%E5%8F%8C%E5%BC%95%E5%AF%BC/</guid><description>安装 首先，禁用可信计算模块TPM和修改安全引导为信任第三方签名。 其次，查看磁盘结构，将Raid-0(Intel Rapid &amp;hellip;)修改为AHCI。 然后，UEFI重装windows和安装ubuntu即可。 选择internal drive 否则会出现不能引导Windows的问题。</description></item><item><title>docker基本概念</title><link>https://mlyixi.github.io/post/cs/docker%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link><pubDate>Tue, 26 Jun 2018 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/docker%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid><description>docker 安装ubuntu自带的docker: 1 2 3 sudo apt install docker-io docker-compose sudo systemctl start docker sudo systemctl enable docker 安装最新的docker: 1 2 3 4 5 sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository &amp;#34;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs)stable&amp;#34; sudo apt-get -y install docker-ce sudo usermod -aG docker $USER bootfs rootfs 换源： 1 2 3 vi /etc/docker/daemon.json &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://docker.mirrors.ustc.edu.cn&amp;#34;], 重启： 1 2 sudo systemctl daemon-reload sudo systemctl restart docker 安装docker-compose: 1 2 3 4 sudo curl -L &amp;#34;https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose sudo chmod</description></item><item><title>ubuntu域名服务器</title><link>https://mlyixi.github.io/post/linux/ubuntu%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Thu, 30 Nov 2017 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/ubuntu%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>https://www.linuxtechi.com/install-configure-bind-9-dns-server-ubuntu-debian/</description></item><item><title>ubuntu时间服务器</title><link>https://mlyixi.github.io/post/linux/ubuntu%E6%97%B6%E9%97%B4%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Wed, 29 Nov 2017 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/ubuntu%E6%97%B6%E9%97%B4%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>ubuntu ntp服务器配置与同步 sudo apt install ntp 配置/etc/ntp.conf，如conf/ntp.conf所示 sudo systemctl restart ntp ubuntu ntp客户端配置 现在一般使用systemd-timesyncd与ntp服务器同步 配置/etc/systemd/timesyncd.conf中的NTP=192.168.10.1</description></item><item><title>理解信号</title><link>https://mlyixi.github.io/post/signal/%E5%B0%84%E9%A2%91/</link><pubDate>Sun, 26 Nov 2017 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/signal/%E5%B0%84%E9%A2%91/</guid><description>射频电路按功能主要可分为三类： 发射机 接收机 本振电路 基本概念 发射机的基本原理就是将一个信号$s(t)$调制到一个载波$f_c$上去，而接收机则是从载波$f_c$中分离出这个信号。 信号$s(t)$ 从这个角度看，人天然就是发射机也是接收机，如眼、耳、声带分别是光波接收机、声波接收机和声</description></item><item><title>ubuntu文档系统</title><link>https://mlyixi.github.io/post/linux/ubuntu%E6%96%87%E6%A1%A3%E7%B3%BB%E7%BB%9F/</link><pubDate>Wed, 30 Nov 2016 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/ubuntu%E6%96%87%E6%A1%A3%E7%B3%BB%E7%BB%9F/</guid><description>文档路径 系统apt安装的文档一般在/usr/share/doc下 源码编译的工程文档一般在/usr/local/share/doc下 如uhd, gnuradio man路径 /usr/share/man/ /usr/local/share/man user commands system calls C lib devices and special files file formats and conventions Games miscellanea system admin tools and daemons</description></item><item><title>CMakeLists基本概念</title><link>https://mlyixi.github.io/post/cs/CMakeLists%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link><pubDate>Sat, 26 Nov 2016 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/CMakeLists%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid><description>cmake 常用项，注意顺序 1 2 cmake_minimum_required(VERSION 3.5) project(pcap_tutorial) # 工程名 预处理，如变量，查找依赖等 1 set(CMAKE_CXX_STANDARD 11) # 设置cmake变量 有些变量具有特别含义，如: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 set(CMAKE_BUILD_TYPE &amp;#34;Release&amp;#34;) # 编译成Release(定义NDEBUG宏),相当于cmake参数-DCMAKE_BUILD_TYPE=</description></item><item><title>homebrew日常操作</title><link>https://mlyixi.github.io/post/osx/homebrew%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 12 Sep 2016 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/osx/homebrew%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C/</guid><description>国内安装： 1 /bin/zsh -c &amp;#34;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&amp;#34; 基本概念 brew command options formula 一个formula就是一个安装包. 安装位置在/usr/local/Cellar下. 常用command: install, remove, list, search 更新 1 2 3 4 brew update brew upgrade brew outdated brew cleanup 整体操作虽然方便,但是有些formula还是不常更新比较好,比如数据库.这时就需要: 1 2 brew pin brew unpin 仓库 ho</description></item><item><title>GPT修复记</title><link>https://mlyixi.github.io/post/cs/GPT%E4%BF%AE%E5%A4%8D%E8%AE%B0/</link><pubDate>Tue, 27 Oct 2015 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/GPT%E4%BF%AE%E5%A4%8D%E8%AE%B0/</guid><description>现在用的SSD+HDD混合硬盘, GPT分区(OSX+Win7+ARCH Linux&amp;mdash;好久没上Linux了). 一真用的好好的. 不过好像有次当机后OSX不认HDD分区了.Win下没问题,我也就不当回事,接着用了. 今天升级OSX到10.11, 发现问题依旧,打开磁盘实用工具后发</description></item><item><title>数理统计学6-一个样本的统计推断</title><link>https://mlyixi.github.io/post/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A66-%E4%B8%80%E4%B8%AA%E6%A0%B7%E6%9C%AC%E7%9A%84%E7%BB%9F%E8%AE%A1%E6%8E%A8%E6%96%AD/</link><pubDate>Thu, 29 Jan 2015 15:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A66-%E4%B8%80%E4%B8%AA%E6%A0%B7%E6%9C%AC%E7%9A%84%E7%BB%9F%E8%AE%A1%E6%8E%A8%E6%96%AD/</guid><description>好了，别人给你一个置信区间，置信水平，我们是否相信它呢？没办法，有时候只有自己印证才能相信！！！ 所以，我们只有提取一个样本，检验别人提供给我们的信息是否做假。 基本概念 检验统计量 就是你怀疑的那个参数，例如总体均值，总体方差等 零假设($H_0$)： 一般指那个参数成立或更好，如$\ma</description></item><item><title>安装使用graphviz</title><link>https://mlyixi.github.io/post/cs/%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8graphviz/</link><pubDate>Thu, 29 Jan 2015 14:09:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8graphviz/</guid><description>Graphviz是一个脚本化创建图表并自动布局的开源应用程序.应用广泛. 安装 1 brew install graphviz 使用 无向图graph 1 2 3 4 5 graph example1 { Server1 -- Server2 Server2 -- Server3 Server3 -- Server1 } 有向图digraph 1 2 3 4 5 digraph example2 { Server1 -&amp;gt; Server2 Server2 -&amp;gt; Server3 Server3 -&amp;gt; Server1 } 对象和属性 对象 有全局对象和局部对象之分 点node 线edge 属性 图属性: 大小size:</description></item><item><title>数理统计学5-一个样本的区间估计</title><link>https://mlyixi.github.io/post/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A65-%E4%B8%80%E4%B8%AA%E6%A0%B7%E6%9C%AC%E7%9A%84%E5%8C%BA%E9%97%B4%E4%BC%B0%E8%AE%A1/</link><pubDate>Thu, 29 Jan 2015 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A65-%E4%B8%80%E4%B8%AA%E6%A0%B7%E6%9C%AC%E7%9A%84%E5%8C%BA%E9%97%B4%E4%BC%B0%E8%AE%A1/</guid><description>Jan 29, 2015 点估计在实际中其实没什么用，因为样本与总体分布之间总有偏差，我们用一个最可能的值来估计其实是不准确的。 通常我们都可以容忍一定的偏差，但是你得给我一个可信度，于是，区间估计就应运而生了。 概念 置信水平$1-p$ 指总体参数落到置信区间中的概率。 置信区间$[\hat{\theta_</description></item><item><title>数理统计学4-一个样本的点估计</title><link>https://mlyixi.github.io/post/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A64-%E4%B8%80%E4%B8%AA%E6%A0%B7%E6%9C%AC%E7%9A%84%E7%82%B9%E4%BC%B0%E8%AE%A1/</link><pubDate>Thu, 29 Jan 2015 13:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A64-%E4%B8%80%E4%B8%AA%E6%A0%B7%E6%9C%AC%E7%9A%84%E7%82%B9%E4%BC%B0%E8%AE%A1/</guid><description>通俗的讲，点估计就是用样本值的一个函数去估计总体分布的参数。 数学表述 已知总体分布形式为$D(\theta,&amp;hellip;)$，其参数未知，抽样得一个样本${x_i}$，我们想估计总体分布各参数的一个函数值$a=f(\theta,&amp;hellip;)$, 通过$\hat{a}=g(x</description></item><item><title>数理统计学3-正态分布的导出分布</title><link>https://mlyixi.github.io/post/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A63-%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E7%9A%84%E5%AF%BC%E5%87%BA%E5%88%86%E5%B8%83/</link><pubDate>Thu, 29 Jan 2015 12:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A63-%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E7%9A%84%E5%AF%BC%E5%87%BA%E5%88%86%E5%B8%83/</guid><description>由于我们现实中随机变量一般都服从正态分布，所以，正态分布的随机变量的函数分布在统计学中应用广泛。 $\chi^2$分布 又叫卡方分布。 定理：如果$X\sim N(0,1)$，$Z=X^2\sim \chi_1^2$ 定理：如果$Z_i\sim \chi_1^2$，则$U=\sum_i Z_i\sim \chi_n^2$ t分布 定理：如果$X</description></item><item><title>数理统计学2-基本概念</title><link>https://mlyixi.github.io/post/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A62-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link><pubDate>Thu, 29 Jan 2015 11:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A62-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid><description>其实数理统计的基本概念应该建立在平稳随机过程的基础上,只不过由于统计学的重要性,我们在没有学习随机过程前就要学习统计学,所以,没办法. 平稳过程解释 假设有一个物理量是平稳过程$X(t,\zeta)$,服从某一分布$D(\theta,&amp;hellip;)$. 平稳过程随时间空间不变,所以</description></item><item><title>数理统计学1-导论</title><link>https://mlyixi.github.io/post/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A61-%E5%AF%BC%E8%AE%BA/</link><pubDate>Thu, 29 Jan 2015 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A61-%E5%AF%BC%E8%AE%BA/</guid><description>作为概率论的应用,统计学有不可估量的重要性.所以还是把我理解的统计学放上来. 首先,让我们把视线从数学的抽象转移到现实的具体吧. 误差 概率论只存在于数学概念中,如何将其结论应用于现实世界中呢? 随机误差 如果我们认为某一个物理量(变量)是概率分布已知的随机变量,当我们观察它的时候,它就会</description></item><item><title>寻找vps</title><link>https://mlyixi.github.io/post/cs/%E5%AF%BB%E6%89%BEvps/</link><pubDate>Mon, 26 Jan 2015 14:09:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/%E5%AF%BB%E6%89%BEvps/</guid><description>国内形势越来越严峻,故想找个能支持fq的vps来作博客空间. 搬瓦工 价格很便宜,不过不知道速度怎么样 DigitOcean 看评论比较好,不过有点贵. Linode 更贵了. 暂时还可以用,先放放吧.</description></item><item><title>Doxygen安装和使用</title><link>https://mlyixi.github.io/post/cs/Doxygen%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 12 Jan 2015 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/Doxygen%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid><description>Doxygen 在Xcode插件管理这一文章中列出了OSX下常用的文档生成器,这里我们重点介绍Doxygen 安装 到官网下直接下载图形界面 通过homebrew安装brew install doxygen 使用 doxygen 生成文档 生成配置文件 doxygen -g会在当前目录下生成配置文件Doxyfile. 编辑配置文件 Doxyfile与makefile</description></item><item><title>开源软件列表</title><link>https://mlyixi.github.io/post/linux/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/</link><pubDate>Tue, 30 Dec 2014 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/</guid><description>世人都晓病毒多，杀毒软件少不了！ 国内杀软哪家好? 比来比去裸奔好! 在这个流氓遍地的国内互联网时代,打着名为免费实为平台/流量/渠道的软件们互相在撕逼大战. 所以各种流氓软件就莫名其妙地装在了我们的电脑上,动不动弹个窗,报个警啥的. 特别是杀毒软件和安全卫士等安全概念软件. 这些软件相较于</description></item><item><title>Transmission上六维</title><link>https://mlyixi.github.io/post/cs/Transmission%E4%B8%8A%E5%85%AD%E7%BB%B4/</link><pubDate>Fri, 26 Dec 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/Transmission%E4%B8%8A%E5%85%AD%E7%BB%B4/</guid><description>重装了实验室网关(archlinux 3.17.4),发现transmission连不上六维的tracker了.之前(netcfg)明明是可以的.网络配置都是copy的哈,为什么换成netctl就不行了呢. 更奇怪的是我的ipv6-nat下的局域网电脑是可以连上的(ipv6好好的).</description></item><item><title>黑苹果UEFI安装教程</title><link>https://mlyixi.github.io/post/osx/%E9%BB%91%E8%8B%B9%E6%9E%9CUEFI%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</link><pubDate>Thu, 25 Dec 2014 17:43:52 +0800</pubDate><guid>https://mlyixi.github.io/post/osx/%E9%BB%91%E8%8B%B9%E6%9E%9CUEFI%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</guid><description>导言: 其实如果你只想装一个黑苹果而不要求完美驱动的话,其安装还是很简单的.当然,你得有合适的硬件(一般主流intel平台都能装,amd的你就折腾吧),如果想省事的话那就看这里的硬件购买推荐. 我买电脑的时候没想过要折腾黑苹果,但还是主流intel+nvidida平台,所以只能悲催地</description></item><item><title>Xcode插件管理</title><link>https://mlyixi.github.io/post/osx/Xcode%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86/</link><pubDate>Thu, 25 Dec 2014 17:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/osx/Xcode%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86/</guid><description>插件也要包管理(Alcatraz) 之前(一年前吧), 关注了下Xcode插件,但是看到其包管理软件Alcatraz还在更新中,所以就没安装了.今天突然想起插件的事,就去看了下,果断支持最新版Xcode了.果断安装: 1 curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh VVDocumenter 文档是一件麻烦事,果断选用VVDocumenter吧,</description></item><item><title>github协议和多用户免密码推送</title><link>https://mlyixi.github.io/post/cs/github%E5%8D%8F%E8%AE%AE%E5%92%8C%E5%A4%9A%E7%94%A8%E6%88%B7%E5%85%8D%E5%AF%86%E7%A0%81%E6%8E%A8%E9%80%81/</link><pubDate>Mon, 22 Dec 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/github%E5%8D%8F%E8%AE%AE%E5%92%8C%E5%A4%9A%E7%94%A8%E6%88%B7%E5%85%8D%E5%AF%86%E7%A0%81%E6%8E%A8%E9%80%81/</guid><description>今天发现github推出了MAC下的图形管理软件,果断试用了下,发现蛮不错的.可惜好像不支持多帐号. 想着用多帐号模拟分布式合作练习git操作的 = =. 昨天新建了个用户,打算把练习代码放到上面去, 结果总是显示empty reply from server. 可能的原因是: 用的https协议,被墙了. 没有配置当前仓库下的</description></item><item><title>iproute包介绍</title><link>https://mlyixi.github.io/post/linux/iproute%E5%8C%85%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 08 Dec 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/iproute%E5%8C%85%E4%BB%8B%E7%BB%8D/</guid><description>你现在看的linux书籍是否还在介绍linux下用ifconfig,windows下用ipconfig查询ip,route查看路由？这完全out了。现在主流linux发行版一般不再默认安装这些unix上的net-tools了，而安装iproute2包。 iproute iproute提供了ip命</description></item><item><title>MATLAB中M文件的编码</title><link>https://mlyixi.github.io/post/cs/MATLAB%E4%B8%ADM%E6%96%87%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A0%81/</link><pubDate>Sat, 06 Dec 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/MATLAB%E4%B8%ADM%E6%96%87%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A0%81/</guid><description>试着把windows下写的M文件拿到黑苹果下,结果打开后注释乱码了. 尝试着把文件改成UTF8编码,但是MATLAB还是乱码.看了下官方文档,发现MATLAB用的是windows那一套:根据你的首选语言确定编码,而不用unicode编码. windows下我们都是安装的中文系统,默认</description></item><item><title>vimscript笔记</title><link>https://mlyixi.github.io/post/linux/vimscript%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 05 Dec 2014 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/vimscript%E7%AC%94%E8%AE%B0/</guid><description>用vim基本上就是熟悉各种按键(相信如五笔一样已经习惯),真正要用好它的话还得各种插件,插件多了后不自己手动改改就是各种冲突.所以最终,你得学会vimscript,至少各种概念要熟悉. 这里为笨方法学Vimscript的摘要 设置vim变量 全局 设置(set number),切换(set</description></item><item><title>Vim中的编码设置</title><link>https://mlyixi.github.io/post/linux/Vim%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E8%AE%BE%E7%BD%AE/</link><pubDate>Wed, 03 Dec 2014 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/Vim%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E8%AE%BE%E7%BD%AE/</guid><description>原理 Vim 有四个跟字符编码方式有关的选项，encoding、fileencoding、fileencodings、termencoding (这些选项可能的取值请参考 Vim 在线帮助 :help encoding-names)，它们的意义如下: encoding: Vim 内部使用的字符编码方式，包括 Vim 的 buffer (缓冲区)、菜单文本、</description></item><item><title>Archlinux网关安装与配置</title><link>https://mlyixi.github.io/post/linux/Archlinux%E7%BD%91%E5%85%B3%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 30 Nov 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/Archlinux%E7%BD%91%E5%85%B3%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>Archlinux不是滚挂还是滚挂. 试着升级了一下网关(好久没更新了),尝试了pacdiff,不过我显然没有注意到问题所在,虽然还是可以启动,但是好多systemctl service是红的,网络也不行了(netcfg被netctl/networkd替换了),一些服务也不能启动了(</description></item><item><title>OSX下的PATH</title><link>https://mlyixi.github.io/post/osx/OS-X%E4%B8%8B%E7%9A%84PATH/</link><pubDate>Sat, 29 Nov 2014 18:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/osx/OS-X%E4%B8%8B%E7%9A%84PATH/</guid><description>如果你在OSX下使用跨平台的工具(git,macvim,zsh等),反正就是homebrew安装的,你可能已经发现一大堆源于PATH变量的奇怪问题了:我的vim用的好好的,怎么到了gvim就出错了呢? 全部问题来自于OS X想要解决PATH设置混乱的局面,采用了一个Path_help</description></item><item><title>vim-latex配置使用说明</title><link>https://mlyixi.github.io/post/linux/vim-latex%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link><pubDate>Sat, 29 Nov 2014 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/vim-latex%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid><description>前提 当然是安装了texlive 2014了. 安装 YADR的Vim插件中没有latex支持,所以得自己安装插件.一直用vim-latex suite,所以就安装了. 1 yav -u https://github.com/vim-latex/vim-latex 配置 然后在~/.vimrc.after中设置它的必须配置. PATH 习惯性在.zprofile中加入texlive的路径.</description></item><item><title>CodeSignBreak发布</title><link>https://mlyixi.github.io/post/osx/CodeSignBreak-v0.4%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 26 Nov 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/osx/CodeSignBreak-v0.4%E5%8F%91%E5%B8%83/</guid><description>花了几天时间终于把iOS真机调试的内容写成程序了. 基本上仿照JailCoder的外观, 有空请测试~~ 地址在这里</description></item><item><title>总感觉自己是世界上唯一的活人</title><link>https://mlyixi.github.io/post/social/%E6%80%BB%E6%84%9F%E8%A7%89%E8%87%AA%E5%B7%B1%E6%98%AF%E4%B8%96%E7%95%8C%E4%B8%8A%E5%94%AF%E4%B8%80%E7%9A%84%E6%B4%BB%E4%BA%BA/</link><pubDate>Wed, 26 Nov 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/social/%E6%80%BB%E6%84%9F%E8%A7%89%E8%87%AA%E5%B7%B1%E6%98%AF%E4%B8%96%E7%95%8C%E4%B8%8A%E5%94%AF%E4%B8%80%E7%9A%84%E6%B4%BB%E4%BA%BA/</guid><description>记知乎的一个问答,防止知乎死去答案没了 问题 总是感觉自己是世界上唯一一个活人，其他人都类似于游戏中的NPC。不明白为什么我是我，为什么我不是别人。就好像自己是失去了力量的上帝活在人间，看着人们在生活。总感觉自己很特殊，但是是一种说不出来的感觉。一直在想为什么我会在自己的这个躯体里，</description></item><item><title>古典自由主义入门读物摘要3-基本权利</title><link>https://mlyixi.github.io/post/social/%E5%8F%A4%E5%85%B8%E8%87%AA%E7%94%B1%E4%B8%BB%E4%B9%89%E5%85%A5%E9%97%A8%E8%AF%BB%E7%89%A9%E6%91%98%E8%A6%813-%E5%9F%BA%E6%9C%AC%E6%9D%83%E5%88%A9/</link><pubDate>Tue, 04 Nov 2014 16:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/social/%E5%8F%A4%E5%85%B8%E8%87%AA%E7%94%B1%E4%B8%BB%E4%B9%89%E5%85%A5%E9%97%A8%E8%AF%BB%E7%89%A9%E6%91%98%E8%A6%813-%E5%9F%BA%E6%9C%AC%E6%9D%83%E5%88%A9/</guid><description>古典自由主义的目标是建立一个保证个人基本权利的,公正的,对个人干预最小的政府,那么是哪些基本权利?公正性的定义如何而来?注意,这里的公正不是指公平,具体的区别参考下面: 公正性:指平等的权利 人人平等经常会被混淆,有如下几种解释: 法律面前平等的权利 这是公正性对于一个政府的合理解释 结果</description></item><item><title>古典自由主义入门读物摘要2-语录</title><link>https://mlyixi.github.io/post/social/%E5%8F%A4%E5%85%B8%E8%87%AA%E7%94%B1%E4%B8%BB%E4%B9%89%E5%85%A5%E9%97%A8%E8%AF%BB%E7%89%A9%E6%91%98%E8%A6%812-%E8%AF%AD%E5%BD%95/</link><pubDate>Tue, 04 Nov 2014 15:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/social/%E5%8F%A4%E5%85%B8%E8%87%AA%E7%94%B1%E4%B8%BB%E4%B9%89%E5%85%A5%E9%97%A8%E8%AF%BB%E7%89%A9%E6%91%98%E8%A6%812-%E8%AF%AD%E5%BD%95/</guid><description>本来不想写这第二章的,因为简史已经在第一章中解释过了,但是看到好的语句还是觉得得摘抄下. 有且只有两种政治哲学:自由哲学和权力哲学 老子: 我无为而民自化 旧约: 管辖你们的王必这样,他必派你们的儿子为他赶车,跟马,奔走在车前&amp;hellip;必取你们的的女儿为他制造香膏&amp;hellip;你们</description></item><item><title>古典自由主义入门读物摘要1-基本概念</title><link>https://mlyixi.github.io/post/social/%E5%8F%A4%E5%85%B8%E8%87%AA%E7%94%B1%E4%B8%BB%E4%B9%89%E5%85%A5%E9%97%A8%E8%AF%BB%E7%89%A9%E6%91%98%E8%A6%811-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link><pubDate>Tue, 04 Nov 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/social/%E5%8F%A4%E5%85%B8%E8%87%AA%E7%94%B1%E4%B8%BB%E4%B9%89%E5%85%A5%E9%97%A8%E8%AF%BB%E7%89%A9%E6%91%98%E8%A6%811-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid><description>要看一篇关于neoliberalism的文章,可惜看不进去.刚好感冒了,就有了这篇摘要. 以下为参考此书和相关资料的个人理解,如有错误,敬请海涵. 基础 要读这本书,首先要对政治意识形态有一定的了解,至少要对自由主义的历史有了解.因为对自由的不同理解及自由的褒义性,各人都说自己是自由主</description></item><item><title>ProGit摘要7-工作流</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%817-%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><pubDate>Thu, 30 Oct 2014 15:18:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%817-%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid><description>集中式 类似于集中式版本控制系统(CVCS),Git集中式工作流程使用的也是单点协作模型:一个存放代码仓库的中心服务器,可以接受所有开发者提交的代码. 集中式工作流 如果两个开发者从中心仓库克隆代码下来,同时作了一些修订,那么只有第一个开发者可以顺利地把数据推送到共享服务器。第二个开发</description></item><item><title>ProGit摘要6-子模块</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%816-%E5%AD%90%E6%A8%A1%E5%9D%97/</link><pubDate>Wed, 29 Oct 2014 15:18:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%816-%E5%AD%90%E6%A8%A1%E5%9D%97/</guid><description>托管服务中有好多开发库可以供我们使用,我们怎么将它们引入到我们的项目里面来呢,这就是子模块的概念. 添加 1 git submodule add git://uri directoryName 然后你可以通过git status和.gitmodules查看修改内容及子模块信息. 记得添加后要提交. 克隆 现在我们找到一个项目,但是它包含子模块,我们怎么克隆到本地呢 1</description></item><item><title>ProGit摘要5-托管</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%815-%E6%89%98%E7%AE%A1/</link><pubDate>Wed, 29 Oct 2014 13:18:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%815-%E6%89%98%E7%AE%A1/</guid><description>好了,学了本地/远程仓库,分支和合并/衍合,基本可以拿来运用了.在使用中更能理解嘛. 本地的好说,但是远程的怎么办,没服务器啊. 嗯,这时有公司就提供代码托管服务了,如github,gitcafe,oschina. 一般开放项目(开源)不收费,私有项目(不开源)收费. 首先我们得在这些托</description></item><item><title>ProGit摘要4-衍合</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%814-%E8%A1%8D%E5%90%88/</link><pubDate>Tue, 28 Oct 2014 13:18:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%814-%E8%A1%8D%E5%90%88/</guid><description>之前我们讨论了合并(merge),它会进行一次三头合并. merge to C5 衍合 其实,我们还可以把C3里产生的补丁在C4中再打一遍,这种操作就叫衍合 1 2 git checkout experiment git rebase master 或 1 git rebase [主分支] [特性分支] rebase 确认后,你就可以将之快速合并了 rebase 那么你会问,有区别吗?衍合时也是需要你手动个性补丁的.但是比较两都</description></item><item><title>ProGit摘要3-再议分支</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%813-%E5%86%8D%E8%AE%AE%E5%88%86%E6%94%AF/</link><pubDate>Sat, 25 Oct 2014 13:18:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%813-%E5%86%8D%E8%AE%AE%E5%88%86%E6%94%AF/</guid><description>在之前的介绍中我们讨论了三种分支的情况(短期分支,相当于nightly),但在实际中并不足够. 本地分支 许多开发者喜欢同时拥有多个分支而不仅仅只有一个,比如仅在 master 分支中 保留完全稳定的代码,即已经发布或即将发布的代码。与此同时,他们还有一个名为 develop 或 next 的平行分支,专门用于后续的开发,或</description></item><item><title>latex-suite的安装和使用手记</title><link>https://mlyixi.github.io/post/cs/latex-suite%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/</link><pubDate>Fri, 24 Oct 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/latex-suite%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/</guid><description>换了hosts终于用上各种国外服务了,感谢imouto (imouto已经不可用了,而且我现在只用texstudio,简单) 翻到了以前的资料,转到博客中来 安装 下载安装包。 解压到~/.vim下 编辑~/.vimrc，按说明来吧。 1 2 3 4 5 filetype plugin on set shellslash set grepprg=grep\ -nH\ $* filetype indent on let g:tex_flavor=&amp;#39;latex&amp;#39; 编辑~/.vim/f</description></item><item><title>随机过程4-连续性和微分</title><link>https://mlyixi.github.io/post/math/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B4-%E8%BF%9E%E7%BB%AD%E6%80%A7%E5%92%8C%E5%BE%AE%E5%88%86/</link><pubDate>Fri, 24 Oct 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B4-%E8%BF%9E%E7%BB%AD%E6%80%A7%E5%92%8C%E5%BE%AE%E5%88%86/</guid><description>我们知道,随机过程$X(t)$是一族$X(t,\zeta_i)$的函数. 我们如何讨论它的连续性呢? 连续性 很明显地,我们可以说如果这族中每个成员在t处连续,我们就说随机过程对每个实验结果在$t$处连续. 但是这个定义太强太限制了. 于是我们想到了随机变量的收敛性. 比如可以定义依概率连续</description></item><item><title>ProGit摘要2-远程仓库</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%812-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link><pubDate>Fri, 24 Oct 2014 10:18:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%812-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid><description>上一节中我们介绍了git原理和本地仓库的使用,现在介绍远程仓库的使用 克隆仓库 远程 1 git clone git://uri 本地 1 git clone /path/to/repo/ 这样就克隆了远程仓库origin的所有分支,如origin/master. 注意,本地仓库也有master分支,当然还会有其它分支,但是它们没有仓库名(默认为本地嘛). 查看远程库 1 git</description></item><item><title>ProGit摘要1-本地仓库</title><link>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%811-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</link><pubDate>Fri, 24 Oct 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/ProGit%E6%91%98%E8%A6%811-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</guid><description>看了几遍git方便的使用指南,但是由于不经常用,总是忘了,只记得最基本的clone,submodule之类的,完全不够用啊. 现在再看一篇经典著作《Pro Git》,并摘要如下. 书籍地址：https://iissnan.com/progit/ 基本原理 不像其它CVS那样保存差异数据,G</description></item><item><title>随机过程3-一个随机过程的函数</title><link>https://mlyixi.github.io/post/math/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B3-%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B%E7%9A%84%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 23 Oct 2014 18:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B3-%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B%E7%9A%84%E5%87%BD%E6%95%B0/</guid><description>随机过程经常用于信号处理,所以一般都是从系统角度进行论述的.而一个随机过程的函数其实是不准确的,但是我们要比对随机变量,所以还是这样命名. 给定一个随机过程$X(t)$作为输入,经过系统,输出为随机过程$Y(t)$,记为: $$ Y(t)=T[X(t)] $$ 这里算子$T$可理解为一种复杂的函数. 确定性 如果$X(</description></item><item><title>随机过程2-平稳性</title><link>https://mlyixi.github.io/post/math/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B2-%E5%B9%B3%E7%A8%B3%E6%80%A7/</link><pubDate>Thu, 23 Oct 2014 16:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B2-%E5%B9%B3%E7%A8%B3%E6%80%A7/</guid><description>狭义平稳性 定义 如果时间起点的推移不影响它的统计性质,则我们说随机过程$X(t)$是(狭义)平稳的. 联合平稳 有限阶平稳 广义平稳性 定义 如果随机变量的期望是常量而自相关只依赖于 $$ t_1-t_2 $$ 联合平稳 渐近平稳 周期平稳 平稳增量</description></item><item><title>随机过程1-基本概念</title><link>https://mlyixi.github.io/post/math/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link><pubDate>Thu, 23 Oct 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid><description>在上面几节中我们讨论了概率论,定义了随机变量,同时了解了最常用的重复试验其实是定义了一个随机变量序列,并讨论了大数定理和中心极限定理的意义. 重复试验是如此的重要,我们能不能扩充一下随机变量,使它天然地具备这个性质,并且适用于更广的情况,比如实验结果是随时间改变的? 自然而然的,我们</description></item><item><title>概率论12-参数估计</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA12-%E5%8F%82%E6%95%B0%E4%BC%B0%E8%AE%A1/</link><pubDate>Wed, 22 Oct 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA12-%E5%8F%82%E6%95%B0%E4%BC%B0%E8%AE%A1/</guid><description>在统计学中我们有时候不能知道总体的全部信息而只能知道部分样本信息(这里不讨论大数据= =.). 我们要做的是,根据样本信息来推测总体信息. 这在统计学中有一个术语叫:统计推断,而它又分为两类,即参数估计(估计理论)和假设检验(检测理论). 现在我们先不考虑统计学中的参数估计问题,让我们先来看看</description></item><item><title>概率论11-中心极限定理</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA11-%E4%B8%AD%E5%BF%83%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/</link><pubDate>Wed, 22 Oct 2014 12:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA11-%E4%B8%AD%E5%BF%83%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/</guid><description>上一节介绍的大数定理指出,对于随机实验$\overline{\mathfrak{E}}$,其密度函数PDF总是集中在它的平均值附近.但是这个密度的实际形状确没有讨论.那么,这个形状或PDF函数形式是怎么样的呢?这就是中心极限定理讨论的. 中心极限定理 连续型 随机变量$X_i$是连续且</description></item><item><title>概率论10-收敛及大数定理</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA10-%E6%94%B6%E6%95%9B%E5%8F%8A%E5%A4%A7%E6%95%B0%E5%AE%9A%E7%90%86/</link><pubDate>Wed, 22 Oct 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA10-%E6%94%B6%E6%95%9B%E5%8F%8A%E5%A4%A7%E6%95%B0%E5%AE%9A%E7%90%86/</guid><description>接下来,我们终于摆脱各种恼人的公式推导,可以换一个新的视角重新审视概率论了:以概率论和统计学相结合的角度再来看看概率论. 首先,我们接着上节内容看看,随机变量序列有没有极限. 随机变量序列的极限的定义 我们知道数列$x_n$的极限定义为: 若对给定的$\delta \gt 0$,我们总能找到一整</description></item><item><title>概率论9-随机变量序列/向量</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA9-%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E5%BA%8F%E5%88%97-%E5%90%91%E9%87%8F/</link><pubDate>Mon, 20 Oct 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA9-%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E5%BA%8F%E5%88%97-%E5%90%91%E9%87%8F/</guid><description>在概率论7/8中我们介绍了两个随机变量的情况,这里我假设读者有自行推导更多随机变量(随机向量,随机序列)的能力,就随机向量这块就简单说明下. 联合分布 $$ F(x_1,\cdots,x_n)=P\lbrace X_1 \le x_1,\cdots, X_n\le x_n\rbrace $$ 密度函数 $$ f(x_1,\cdots,x_n) $$ 边缘分布 $$ F(x_1,x_3)=F(x_1,\infty,x_3,\infty) $$ 随机变量的函数 由$f(x_1,\cdots,x_n)$及已知函数$g_i(x_1,\cd</description></item><item><title>PRML笔记1</title><link>https://mlyixi.github.io/post/ml/PRML%E7%AC%94%E8%AE%B01/</link><pubDate>Wed, 15 Oct 2014 14:09:52 +0800</pubDate><guid>https://mlyixi.github.io/post/ml/PRML%E7%AC%94%E8%AE%B01/</guid><description>概念 训练集(training set) 测试集(test set) 检验集(validation set) 目标向量(target vector)，由目标变量组成 泛化能力(generalization) 预处理(preprocessing)，也叫特征提取(feature extraction) 分类 根据目标向量的有无，我们分为监督学习(</description></item><item><title>概率论8-两个随机变量的函数</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA8-%E4%B8%A4%E4%B8%AA%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 13 Oct 2014 16:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA8-%E4%B8%A4%E4%B8%AA%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E5%87%BD%E6%95%B0/</guid><description>一个函数 假定我们现在有一个函数$z=g(x,y)$,我们用随机变量$X$和$Y$代入得到的新随机变量$Z=g(X,Y)$服从什么分布呢? 由上一章我们知道,对于二维随机变量的联合分布函数是其密度函数的二维平面积分,从这里出发,我们可以得到多维随机变量函数的分布函数 分布函数 假设$X$</description></item><item><title>概率论7-两个随机变量</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA7-%E4%B8%A4%E4%B8%AA%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 13 Oct 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA7-%E4%B8%A4%E4%B8%AA%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</guid><description>之前我们介绍了一个随机变量的情形,现在我们把它推广到两个或多个随机变量. 联合分布 如果我们有两个随机变量$X,Y$,则集合$\lbrace X \le x\rbrace$和$\lbrace Y \le y\rbrace$都是事件,分别有概率$P\lbrace X \le x\rbrace=F_X(x) P\lbrace Y \le y\rbrace=F_Y(y)$ 在笛卡尔乘积空间,我们定义一个</description></item><item><title>概率论6-一个随机变量的函数</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA6-%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 13 Oct 2014 12:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA6-%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E5%87%BD%E6%95%B0/</guid><description>我们已知一个函数$y=g(x)$,然后用随机变量$X$代替$x$生成的$Y$是一个新的随机变量. 分布函数 $$F_Y(y)=P\lbrace Y \le y \rbrace=P\lbrace X \in I_y \rbrace$$ 其中$I_y$表示使$g(x)\le y$成立的所有实数$x$的集合 密度函数 定理: 对一给定的$y$,为求$f_Y(y)$,我们先求解关于$x$的方程$y=g(x</description></item><item><title>概率论5-一个随机变量</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA5-%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 13 Oct 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA5-%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</guid><description>下面的5-9节内容基本上就是课本上罗列的最多的公式了,比较 枯燥. 我只提供大致的一个框架,有必要才做一些解释. 前文介绍了随机变量的概念,它其实是对结果(元事件)的量化.一般而言,我们用大写字母表示随机变量,并且如果我们要谈到好几个随机变量,我们总是假定它们是定义在同一个实验上的. 随</description></item><item><title>概率论4-独立事件</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA4-%E7%8B%AC%E7%AB%8B%E4%BA%8B%E4%BB%B6/</link><pubDate>Sun, 12 Oct 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA4-%E7%8B%AC%E7%AB%8B%E4%BA%8B%E4%BB%B6/</guid><description>在前一章,我们提到了独立事件,并指出了什么是独立事件,但是还是有些模糊的.独立事件之于概率论,是有其特殊意义的.书上说,由于独立性概念才使得概率论没有仅被当作测试论的一个分支,而发展成一门与之分离的学科. 我们可以看出,独立的概念有独立于概率论的一面. 那么,为什么会有独立事件? 概率</description></item><item><title>一个普通急诊的花销</title><link>https://mlyixi.github.io/post/social/%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E6%80%A5%E8%AF%8A%E7%9A%84%E8%8A%B1%E9%94%80/</link><pubDate>Sat, 11 Oct 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/social/%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E6%80%A5%E8%AF%8A%E7%9A%84%E8%8A%B1%E9%94%80/</guid><description>老婆晚上着凉了,诱发偏头疼,熬了一天,受不了了就跑到广州军区总医院急诊. 为什么是这一家? 因为之前有跑到这家医院看偏头疼,当时的医生很好,说这病没法治的,放松心情,保持健康作息,也许过个多少年自然就好了.实在病发熬不住了吃点止疼药.所以我们想着还是到这家去看看吧. 医生态度很好,先叫</description></item><item><title>多臂赌博机3</title><link>https://mlyixi.github.io/post/ml/%E5%A4%9A%E8%87%82%E8%B5%8C%E5%8D%9A%E6%9C%BA3/</link><pubDate>Sat, 11 Oct 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/ml/%E5%A4%9A%E8%87%82%E8%B5%8C%E5%8D%9A%E6%9C%BA3/</guid><description>在上两节我们讨论的UCB系列算法面对的情况是静态的,即各臂的分布参数不会改变,于是我们就&amp;quot;乐观地面对不确定性&amp;quot;&amp;ndash;根据采样平均值尽快地确定那个最好的臂. 但是在现实世界中收益结构是更复杂的,非静态的.特别是当它涉及到竞争的场景,如股票交易.我们称之为对</description></item><item><title>多臂赌博机2</title><link>https://mlyixi.github.io/post/ml/%E5%A4%9A%E8%87%82%E8%B5%8C%E5%8D%9A%E6%9C%BA2/</link><pubDate>Fri, 10 Oct 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/ml/%E5%A4%9A%E8%87%82%E8%B5%8C%E5%8D%9A%E6%9C%BA2/</guid><description>这一节我们来了解下多臂赌博机问题的提出和理论基础,最后讨论下UCB系列策略.当然,这里的多臂赌博机问题是随机式的. 随机式多臂赌博机的问题描述就不在这里重复了,可以参考上一节 理论 问题的证明 Lai &amp;amp; Robbins在1985年论证了对于某些特定的分布(只有一个实参的分布),存在有策略使得它</description></item><item><title>概率论3-条件概率</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA3-%E6%9D%A1%E4%BB%B6%E6%A6%82%E7%8E%87/</link><pubDate>Thu, 09 Oct 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA3-%E6%9D%A1%E4%BB%B6%E6%A6%82%E7%8E%87/</guid><description>这一节我们讨论条件的概念 问题 我们都清楚,已知一个具有非零概率的事件$\mathscr M$,在$\mathscr M$下事件$\mathscr A$发生的概率为: $$P(\mathscr A|\mathscr M)=\frac{P(\mathscr A \mathscr M)}{P(\mathscr M)}$$ 如果我们解释成$\mathscr A$在条件$\mathscr M$下的概率等于它们同时发生的概率除以条件$\ma</description></item><item><title>概率论2-基本概念</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA2-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link><pubDate>Tue, 07 Oct 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA2-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid><description>下面我们指出概率论的公理化定义 试验 首先,我们必须明确概率论中的两个抽象概念:结果和事件. 一次试验指的是一次已经明确规定的实验.我们可以观察到单个的结果$\zeta_i$,而如果事件$\mathscr A$在逻辑上包含了某个结果, 我们就称该事件在这次试验中出现. 我们对只包含一个结果的</description></item><item><title>MathJax基础教程和快速参考</title><link>https://mlyixi.github.io/post/cs/MathJax%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E5%92%8C%E5%BF%AB%E9%80%9F%E5%8F%82%E8%80%83/</link><pubDate>Mon, 06 Oct 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/MathJax%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E5%92%8C%E5%BF%AB%E9%80%9F%E5%8F%82%E8%80%83/</guid><description>更多资料请参考此文和latex手册 MathJax基础 用mathjax渲染的公式可以在现代浏览器里面查看latex代码，方法是在公式上右键-&amp;gt;Show Math As-&amp;gt;Tex commands Wordpress中使用latex Wordpress本身会提供latex插件:WP-latex,是取自官方插件包jetp</description></item><item><title>概率论1-什么是概率论</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA1-%E4%BB%80%E4%B9%88%E6%98%AF%E6%A6%82%E7%8E%87%E8%AE%BA/</link><pubDate>Mon, 06 Oct 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E8%AE%BA1-%E4%BB%80%E4%B9%88%E6%98%AF%E6%A6%82%E7%8E%87%E8%AE%BA/</guid><description>前言 发现一本概率论与随机过程的好书《概率、随机变量与随机过程》，把笔记记录成博客。 我们首先要问，什么是概率论，为什么会有概率论？ 我们对物理世界和其抽象模型的区别是容易接受的，比如物理学. 同时我们会认为：宇宙是按确定性规律发展的，一些规律精确地规定了宇宙的未来，只是由于我们的无和或</description></item><item><title>多臂赌博机1</title><link>https://mlyixi.github.io/post/ml/%E5%A4%9A%E8%87%82%E8%B5%8C%E5%8D%9A%E6%9C%BA1/</link><pubDate>Sat, 04 Oct 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/ml/%E5%A4%9A%E8%87%82%E8%B5%8C%E5%8D%9A%E6%9C%BA1/</guid><description>假想一个风投他想着他的收益最大化,这时他总会面临一个两难: 何时去投资那些已经成功的公司,何时去投资那些还没有成功但具有很大潜力的公司.这里套用股市里的一句话:收益总是伴随着风险的. 一个成功的风投必须处理好这个勘探-开发两难(exploration and exploitation tradeoff): 勘探过多意味着不能获得较高的</description></item><item><title>Linux防火墙2</title><link>https://mlyixi.github.io/post/linux/Linux%E9%98%B2%E7%81%AB%E5%A2%992/</link><pubDate>Sat, 04 Oct 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/Linux%E9%98%B2%E7%81%AB%E5%A2%992/</guid><description>在上一节我们提到,我们配置的防火墙可能已经在别人配置的防火墙内了. 即使自己设置了数据包全部通过的规则,数据包也可能在外层防火墙被滤掉了.那么如何扫描别人给我们开放的端口呢? 这里我们介绍nmap. 安装 osx: brew install nmap linux: 用你最喜欢的包管理安装吧 windows: zenmap 功能架构图 nmap功能架构图 主机发现(Hos</description></item><item><title>YADR替换oh-my-zsh</title><link>https://mlyixi.github.io/post/cs/YADR%E6%9B%BF%E6%8D%A2oh-my-zsh/</link><pubDate>Fri, 26 Sep 2014 14:09:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/YADR%E6%9B%BF%E6%8D%A2oh-my-zsh/</guid><description>由于喜欢agnoster主题,但是oh-my-zsh默认还是解决不了这个问题.所以考虑换个配置包.终于找到另一个不用配置的的配置包YADR,基本不用自己手动一点点搞了,除了自己下载iterm2,其它依赖会直接搞定: 它会安装homebrew(记得回车输入密码), 然后安装必要的软件,</description></item><item><title>TCPIP及wireshark分析</title><link>https://mlyixi.github.io/post/cs/TCPIP%E5%8F%8Awireshark%E5%88%86%E6%9E%90/</link><pubDate>Fri, 26 Sep 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/TCPIP%E5%8F%8Awireshark%E5%88%86%E6%9E%90/</guid><description>TCP 三次握手 开始: 客户发送Syn,Seq=X 服务发送Syn,Ack=X+1,Seq=Y 客户发送Ack=Y+1,Seq=Z 结束 服务发送Fin,Seq=X 客户发送Ack,Seq=X+1 客户发送Fin,Seq=Y 服务发送Ack,Seq=Y+1 wireshark分析使用 过滤器 协议过滤:如T</description></item><item><title>Linux防火墙1</title><link>https://mlyixi.github.io/post/linux/Linux%E9%98%B2%E7%81%AB%E5%A2%991/</link><pubDate>Thu, 25 Sep 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/Linux%E9%98%B2%E7%81%AB%E5%A2%991/</guid><description>iptables与netfilter 经常混用,不过iptables指的是防火墙的管理工具而netfilter指的是linux实现防火墙的内核模块. iptables结构 表(Tables) 现在一般有5种内建表,Filter表, NAT表,Mangle表,Raw表和security表,分</description></item><item><title>MATLAB基础</title><link>https://mlyixi.github.io/post/cs/MATLAB%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 06 Sep 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/MATLAB%E5%9F%BA%E7%A1%80/</guid><description>预定义名 eps: 最小浮点数 pi: $\pi$ i/j: 虚数单位 Inf/inf: 无穷大 intmax/intmin: 最大、最小正数 realmax/realmin: 最大、最小实数 函数 accuumarray cross cumsum cumprod dot prod sum tril, triu 变量管理 clear clc clf 工作空间图形化操作 who/whos save/load ans 工作目录 cd dir doc help which 运算 加法: + 减法: - 乘法: * 点乘: .* 左除: / 右除\ 点除: ./ 幂: ^ 转置: .' 共轭转置: ' 关系运算: ==, ~=,&amp;gt;,&amp;gt;=,&amp;lt;,&amp;lt;= 逻辑运算: &amp;amp;,|,~ all: 是否为全0; B=all(A),B=all(A,dim) any:</description></item><item><title>postgres基础</title><link>https://mlyixi.github.io/post/cs/postgres%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 06 Sep 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/postgres%E5%9F%BA%E7%A1%80/</guid><description>1 2 3 4 5 6 7 8 9 10 sudo su - postgres psql -c &amp;#34;alter user postgres with password &amp;#39;StrongAdminP@ssw0rd&amp;#39;&amp;#34; sudo vi /etc/postgresql/12/main/postgresql.conf listen_addresses = &amp;#39;*&amp;#39; sudo vi /etc/postgresql/12/main/pg_hba.conf host all all 192.168.10.0/24 md5 sudo systemctl restart postgresql sudo apt install pgadmin4 pgadmin4-apache2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 create table dept( id serial primary key, name varchar(20) ) create table employee1( id serial primary key, name varchar(20), age int, salary real, dept_id int references dept (id) ) insert into dept (name) values(&amp;#39;人事部&amp;#39;); insert into dept (name) values(&amp;#39</description></item><item><title>latex系统说明</title><link>https://mlyixi.github.io/post/cs/latex%E7%B3%BB%E7%BB%9F%E8%AF%B4%E6%98%8E/</link><pubDate>Wed, 03 Sep 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/latex%E7%B3%BB%E7%BB%9F%E8%AF%B4%E6%98%8E/</guid><description>格式 plaintex latex2e context 其它格式:amstex,BLUe,HP tex, Jadetex, Lollipop, MacroTex,MeX,PHYS(E),PHYZZY,StarTex,Texinfo,Texsis,XMLTex,YTEX,ZzTex 引擎(编译器) tex tex3 e-tex pdftex pdflatex xetex luatex META*(辅助程序) MetaFont MetaPost MegaPost BibTex: 参考文献管理编译程序及格式,作用同bibliography环境 编译:先编译tex,生成aux文件,再用bibtex编译,而后再用latex生成带参考文献的文档 dvi2pdf dvipdf dvipdfm dvipdfmx</description></item><item><title>硬盘接口与参数</title><link>https://mlyixi.github.io/post/cs/%E7%A1%AC%E7%9B%98%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%8F%82%E6%95%B0/</link><pubDate>Wed, 03 Sep 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/%E7%A1%AC%E7%9B%98%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%8F%82%E6%95%B0/</guid><description>PCIe PCIe是一种物理接口：Peripheral Component Interconnect Express，替换PCI、PCI-X、AGP等接口 M.2 M.2是一种物理接口：Next Generation Form Factor (NGFF)，替换mSATA接口，一般用于笔记本，和U.2是竞争关系，使用PCIe MiniCard的物理布局，支持AHCI和NVMe控制接口</description></item><item><title>Probability Theory: the logic of science</title><link>https://mlyixi.github.io/post/math/Probability-Theory-the-logic-of-science/</link><pubDate>Wed, 03 Sep 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/Probability-Theory-the-logic-of-science/</guid><description>Plausible reasoning The actual science of logic is conversant at present only with things either certain, impossible, or entirely doubtful, none of which (fortunately) we have to reason on. Therefore the true logic for this world is the calculus of Probabilities, which takes account of the magnitude of the probability which is, or ought to be, in a reasonable man's mind. &amp;ndash;Maxwell Aristotle deductive reasoning(apodeixis) strong syllogism if A is true, then B is true; now A is true, therefore B is true if A is true, then B is true; now B is false, therefore A is false Plausible reasoning weak syllogism(epagoge) if A is true, then B is true; now B is true, therefore A becomes more plausible. if A is true, then B is true, now A is false, therefore B becomes less plausible. weaker syllogism if</description></item><item><title>概率分布总结</title><link>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83%E6%80%BB%E7%BB%93/</link><pubDate>Wed, 03 Sep 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/math/%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83%E6%80%BB%E7%BB%93/</guid><description>常见分布 均匀分布: $rand(M,N)$ 伯努利分布(01分布,两点分布): $x=rand(M,N); y=(sign(x-P+eps)+1)/2, P为1的概率$ 二项分布:N个独立的伯努利分布中1的次数,$binornd(N,P,m)$ 泊松分布:描述单位时间内随机事件发生次数的概率分布,$poissrnd()$ 正态分布(高斯分布):$normrnd()$ 标准正态分布:</description></item><item><title>pymaBandit说明</title><link>https://mlyixi.github.io/post/ml/pymaBandit%E8%AF%B4%E6%98%8E/</link><pubDate>Tue, 02 Sep 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/ml/pymaBandit%E8%AF%B4%E6%98%8E/</guid><description>分布 Bernoulli distribution Poisson distribution Exponential distribution 策略 Gittin&amp;rsquo;s Bayesian optimal strategy for binary rewards [1] The classical UCB policy [2] The UCB-V policy [3] The KL-UCB policy [4] The Clopper-Pearson policy for binary rewards [4] The MOSS policy [5] The DMED policy [6] The Emipirical Likelihood UCB [7] The Bayes-UCB policy [8] The Thompson sampling policy [9] [1] Bandit Processes and Dynamic Allocation Indices J. C. Gittins. Journal of the Royal Statistical Society. Series B (Methodological) Vol. 41, No. 2. 1979 pp. 148–177 [2] Finite-time analysis of the multiarmed bandit problem Peter Auer, Nicolò Cesa-Bianchi and Paul Fischer. Machine Learning 47 2002 pp.235-256 [3] Exploration-exploitation trade-off using variance estimates in multi-armed bandits J.-Y. Audibert, R. Munos, Cs. Szepesvár</description></item><item><title>Xcode6.1下ios8.1免证书真机调试</title><link>https://mlyixi.github.io/post/osx/Xcode6.1%E4%B8%8Bios8.1%E5%85%8D%E8%AF%81%E4%B9%A6%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/</link><pubDate>Sat, 30 Aug 2014 18:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/osx/Xcode6.1%E4%B8%8Bios8.1%E5%85%8D%E8%AF%81%E4%B9%A6%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/</guid><description>iOS9开始已经允许开发者创建免费证书进行真机调试了. 一个必要条件是机器必需为越狱且装有appsync,不然不能运行. 现在appsync for iOS 8 还是beta阶段,但也可以用了,具体见官方说明. 对于低版本的xcode其实有一个比较方便的软件:JailCoder,可惜作者不更新了. 自己</description></item><item><title>Xcode子工程及cocoapods管理</title><link>https://mlyixi.github.io/post/osx/Xcode%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%8F%8Acocoapods%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 30 Aug 2014 17:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/osx/Xcode%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%8F%8Acocoapods%E7%AE%A1%E7%90%86/</guid><description>iOS应用总会用到很多库,而苹果只允许使用第三方的静态库.所以,开发者不能制作简单的framework供其它开发者调用. 而且,静态库加入到自己的工程也是个比较麻烦的事情,特别是有些工程没有制作静态库的target,这时还要自己制作静态库目标. 自定义静态库 新建自己的工程,git化.</description></item><item><title>iOS视图控制器初始化总结</title><link>https://mlyixi.github.io/post/osx/iOS%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E6%80%BB%E7%BB%93/</link><pubDate>Wed, 27 Aug 2014 18:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/osx/iOS%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E6%80%BB%E7%BB%93/</guid><description>首先,区别viewcontroller初始化的三种方式:完全代码化,半代码化初始和IB初始的区别 代码化:完全没有Xib之类的东西,通过纯代码实现加载. 半代码化:设计xib,然后在程序中用代码调用xib来初始化. 完全IB化:设计xib之类,然后加入到其它xib里.如MainWind</description></item><item><title>iOS完全代码化开发</title><link>https://mlyixi.github.io/post/osx/iOS%E5%AE%8C%E5%85%A8%E4%BB%A3%E7%A0%81%E5%8C%96%E5%BC%80%E5%8F%91/</link><pubDate>Wed, 27 Aug 2014 16:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/osx/iOS%E5%AE%8C%E5%85%A8%E4%BB%A3%E7%A0%81%E5%8C%96%E5%BC%80%E5%8F%91/</guid><description>视图 把自定义视图控制器赋给Delegation-window-rootViewController，在自定义视图控制器的loadView方法中初始化view. NOIBDelegation.h 1 2 3 @class NOIBViewController; @property (strong, nonatomic) NOIBViewController *viewController; NOIBAppDelegate.m &amp;ndash; didFinishLaunchingWithOptions: 1 self.window.rootViewController = viewController; NOIBViewController.h 1 @property (strong, nonatomic) UILabel *label; NOIBViewController.m 1 2 3 4 5 6 7 8 9 10 - (void)loadView { CGRect frame = CGRectMake(0, 0, 320, 480); self.view = [[UIView alloc] initWithFrame:frame]; self.view.backgroundColor = [UIColor whiteColor]; frame = CGRectMake(0, 0, 100, 50);</description></item><item><title>iOSframe和bound的理解</title><link>https://mlyixi.github.io/post/osx/iOSframe%E5%92%8Cbound%E7%9A%84%E7%90%86%E8%A7%A3/</link><pubDate>Wed, 27 Aug 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/osx/iOSframe%E5%92%8Cbound%E7%9A%84%E7%90%86%E8%A7%A3/</guid><description>翻译自此文 在iOS中,viewController是一个控制view层次的对象.主要负责MVC中Model和View之间的交互. viewController中有一个根视图self.view. self.view的范围是从状态栏下面到属于该控制器的下界(iOS7中已经改成透明状态栏了</description></item><item><title>KDE4下gtk程序很丑</title><link>https://mlyixi.github.io/post/linux/kde4%E4%B8%8Bgtk%E7%A8%8B%E5%BA%8F%E5%BE%88%E4%B8%91/</link><pubDate>Wed, 27 Aug 2014 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/kde4%E4%B8%8Bgtk%E7%A8%8B%E5%BA%8F%E5%BE%88%E4%B8%91/</guid><description>gtk程序如chromium和eclipse,在kde下的按钮像是到了win95年代 查了一下,发现只要安装gtk-qt-engine,然后在系统设置中调整成qt.现在貌似得到AUR里去下载gtk-qt-enqine了.</description></item><item><title>python科学计算环境搭建</title><link>https://mlyixi.github.io/post/cs/python%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Tue, 26 Aug 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/python%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>安装homebrew 安装python,设置环境变量 安装forgtran 下载numpy包，python setup.py(不能用pip安装，已坏） pip install scipy 安装matplotlib: brew install freetype,libpng; pip install matplotlib.</description></item><item><title>wordpress的markdown</title><link>https://mlyixi.github.io/post/cs/wordpress%E7%9A%84markdown/</link><pubDate>Tue, 26 Aug 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/wordpress%E7%9A%84markdown/</guid><description>Markdown快速参考 强调 1 2 *Emphasize* _emphasize_ **Strong** __Strong__ 超链接 1 A [link](http://example.com &amp;#34;Title&amp;#34;). 或 1 2 3 Some text with [a link][1] and another [link][2]. [1]: http://example.com/ &amp;#34;Title&amp;#34; [2]: http://example.org/ &amp;#34;Title&amp;#34; 图片 1 Logo: ![Alt](/wp.png &amp;#34;Title&amp;#34;) 或 1 2 Smaller logo: ![Alt][1] [1]: /wp-smaller.png &amp;#34;Title&amp;#34; 脚注 1 2 I have more [^1] to say up here. [^1]: To say down here. 换行 wordpress不支持双空格换行,只能支持回车换行 列表 1 2 * Item - Item 或 1 2 3 4 5 1. Item 2. Item * Mixed * Mixed 3. Item 区块 1 2 3 &amp;gt; Block 1 &amp;gt; Block 2</description></item><item><title>美化shell</title><link>https://mlyixi.github.io/post/cs/%E7%BE%8E%E5%8C%96shell/</link><pubDate>Tue, 26 Aug 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/%E7%BE%8E%E5%8C%96shell/</guid><description>现在发现oh-my-zh并不是很好,更好的方法见这里 MAC: 安装 homebrew 安装软件: brew install zsh, vim , macvim etc... 注册环境变量:修改/etc/paths,将/usr/local/bin设为第一行。系统将优行查找/usr/local/bin中的程序 注册 shell:修改/etc/shells,添加/usr/loc</description></item><item><title>兼容UEFI2.3主板添加主板引导项</title><link>https://mlyixi.github.io/post/cs/%E5%85%BC%E5%AE%B9uefi2.3%E4%B8%BB%E6%9D%BF%E6%B7%BB%E5%8A%A0%E4%B8%BB%E6%9D%BF%E5%BC%95%E5%AF%BC%E9%A1%B9/</link><pubDate>Mon, 25 Aug 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/cs/%E5%85%BC%E5%AE%B9uefi2.3%E4%B8%BB%E6%9D%BF%E6%B7%BB%E5%8A%A0%E4%B8%BB%E6%9D%BF%E5%BC%95%E5%AF%BC%E9%A1%B9/</guid><description>win和黑苹果双系统的引导其实是没有必要用clover的efi替换wbm的efi的。当然，如果你的主板支持uefi的情况比较好的，比如有图形界面的uefi引导，那么可以不用看下面。 添加主板的efi引导项(nvram)可以用UEFISHELL的bcfg, Linux的efibootm</description></item><item><title>ubuntu创建deb包</title><link>https://mlyixi.github.io/post/linux/ubuntu%E5%88%9B%E5%BB%BAdeb%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mlyixi.github.io/post/linux/ubuntu%E5%88%9B%E5%BB%BAdeb%E5%8C%85/</guid><description>工作中经常要自己编译源代码，对于大型开源工程，每安装一台电脑就要重新编译一下，即浪费时间又容易出问题（git代码总在更新）。 即然我是一个喜欢用archlinux而不喜欢gentoo的人，就很想找到即可以改源代码，又可以分发的方法，对，就是打包&amp;mdash;&amp;mdash;&amp;mdas</description></item></channel></rss>