<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on mlyixi的博客</title><link>https://mlyixi.github.io/categories/Linux/</link><description>Recent content in Linux on mlyixi的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 20 Jan 2021 09:10:47 +0800</lastBuildDate><atom:link href="https://mlyixi.github.io/categories/Linux/index.xml" rel="self" type="application/rss+xml"/><item><title>DPI工具比较</title><link>https://mlyixi.github.io/post/network/dpi%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83/</link><pubDate>Wed, 20 Jan 2021 09:10:47 +0800</pubDate><guid>https://mlyixi.github.io/post/network/dpi%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83/</guid><description>Independent Comparison of Popular DPI Tools for Traffic Classification 采集工具： https://sourceforge.net/projects/vbsi/files/Release%206/ 数据集： https://cba.upc.edu/monitoring/traffic-classification 数据集好像不公开，可能要通过邮件申请。 摘要： 深度数据包检查（DPI）是用于流量分类的最新技术。按照传统观点，DPI是最准确的分类技术。因此，大多数流行的产品，无论是商业产品还是开源产品，都依赖某种DPI进行流量分类。但是，由于缺乏公共数据集</description></item><item><title>NFS服务器</title><link>https://mlyixi.github.io/post/linux/NFS%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Thu, 14 Jan 2021 15:42:57 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/NFS%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>服务端 安装 1 2 sudo apt update sudo apt install nfs-kernel-server 配置文件一般不需要更改： 1 2 /etc/default/nfs-kernel-server /etc/default/nfs-common 准备共享目录 1 2 3 |- /srv/nfs4 |- backups |- www 1 2 sudo mount --bind /opt/backups /srv/nfs4/backups sudo mount --bind /var/www /srv/nfs4/www 1 2 3 #/etc/fstab /opt/backups /srv/nfs4/backups none bind 0 0 /var/www /srv/nfs4/www none bind 0 0 共享 1 2 3 4 #/etc/exports /srv/nfs4 192.168.33.0/24(rw,sync,no_subtree_check,crossmnt,fsid=0) /srv/nfs4/backups 192.168.33.0/24(ro,sync,no_subtree_check) 192.168.33.3(rw,sync,no_subtree_check) /srv/nfs4/www 192.168.33.110(rw,sync,no_subtree_check) 指定哪些IP可以进行什么操作，如: 192.168.33.0/24下的所有主机可以在nfs4下读写(rw),</description></item><item><title>IOL_DHCP配置</title><link>https://mlyixi.github.io/post/network/IOL_DHCP%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 11 Jan 2021 14:34:15 +0800</pubDate><guid>https://mlyixi.github.io/post/network/IOL_DHCP%E9%85%8D%E7%BD%AE/</guid><description>初始化设置 刚进入系统会要求设置密码和管理端口，按提示操作即可。 配置网络接口 1 2 3 4 5 6 7 8 9 10 11 Router&amp;gt; enable Router# configure terminal Router(config)# hostname Router Router(config)# enable secret eve Router(config)# no ip domain-lookup Router(config)# interface ethernet 0/1 #这里接口名可能不同，按?查询。 Router(config-if)# ip address 192.168.5.1 255.255.255.0 Router(config-if)# no shutdown Router(config-if)# end Router# write 查看网络接口 1 Router# show interfaces DHCP Server 1 2 3 4 5 6 7 8 9 10 dhcp# configure terminal dhcp(config)# service dhcp dhcp(config)# ip dhcp excluded-address 192.168.5.1 192.168.5.100 //配置dhcp不分</description></item><item><title>解析超级虚拟实验室eve Ng的工作模式</title><link>https://mlyixi.github.io/post/network/%E8%A7%A3%E6%9E%90%E8%B6%85%E7%BA%A7%E8%99%9A%E6%8B%9F%E5%AE%9E%E9%AA%8C%E5%AE%A4eve-ng%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 11 Jan 2021 13:39:02 +0800</pubDate><guid>https://mlyixi.github.io/post/network/%E8%A7%A3%E6%9E%90%E8%B6%85%E7%BA%A7%E8%99%9A%E6%8B%9F%E5%AE%9E%E9%AA%8C%E5%AE%A4eve-ng%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</guid><description>转载自https://www.douban.com/note/629657625/ 近些年来，基于虚拟环境的网络设备或者实验室层出不穷。其中最为成功的虚拟实验室产品线以iou-web，unetlab，以及后来继承者eve-ng最为成功。因为原UNetlab的环境依旧在更新，因此现有</description></item><item><title>EVE-NG安装使用</title><link>https://mlyixi.github.io/post/network/eve-ng%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 08 Jan 2021 15:42:08 +0800</pubDate><guid>https://mlyixi.github.io/post/network/eve-ng%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid><description>eve-ng是基于ubuntu开发的网络仿真OS.由于eve-ng直接使用dynamips,qemu等虚拟化技术运行官方的固件,所以其仿真能力是最强的,和实物操作没什么分别.特别是网上有很多镜像,包括防火墙,vpn等,应有尽有,作为内网渗透环境来说最好不过了. 版本 eve-ng pro专业版,</description></item><item><title>安全Bash脚本模板</title><link>https://mlyixi.github.io/post/linux/safe-bash-template/</link><pubDate>Thu, 31 Dec 2020 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/safe-bash-template/</guid><description>bash脚本是日常使用和自动化的最常用的编排脚本之一。和python脚本各有优劣，其中bash脚本最主要的一个问题日常命令罗列后如何安全地执行并处理异常，得到自己想要的结果。下面的bash模板就提供了这方面的一些考虑： 原文链接：https://betterdev.blog/min</description></item><item><title>IPv6主机</title><link>https://mlyixi.github.io/post/network/ipv6%E4%B8%BB%E6%9C%BA/</link><pubDate>Wed, 04 Nov 2020 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/network/ipv6%E4%B8%BB%E6%9C%BA/</guid><description>prefixpolicies 发现双栈网络下优先使用ipv6访问网站，查了一下是因为prefixpolicies的配置，默认为RFC3484标准配置。 Windows netsh interface ipv6 show prefixpolicies Linux cat /etc/gai.conf</description></item><item><title>ubuntu服务器初始配置</title><link>https://mlyixi.github.io/post/linux/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 30 Sep 2020 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/</guid><description>1 2 3 4 5 6 7 sudo vi /etc/cloud/cloud.cfg.d/90_dpkg.cfg sudo apt purge cloud-init snapd nano sudo rm -rf /etc/cloud/ sudo rm -rf /var/lib/cloud/ sudo apt autoremove echo &amp;#34;$USERALL=(ALL:ALL) NOPASSWD: ALL&amp;#34; |sudo tee -a /etc/sudoers echo &amp;#34;set completion-ignore-case on&amp;#34; |sudo tee -a /etc/inputrc 禁用systemd-resolved systemd-resolved不好用，经常将复杂网络配置搞坏，可以考虑禁用掉： 1 2 3 4 systemctl disable systemd-resolved systemctl stop systemd-resolved rm /etc/resolve.conf # 删除符号链接 echo &amp;#34;nameserver 114.114.114.114&amp;#34; &amp;gt; /etc/resolve.conf 网卡 Ubuntu Server 启动时经常卡在:a start job</description></item><item><title>aircrack-ng抓包</title><link>https://mlyixi.github.io/post/linux/aircrack-ng%E6%8A%93%E5%8C%85/</link><pubDate>Sun, 30 Dec 2018 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/aircrack-ng%E6%8A%93%E5%8C%85/</guid><description>optional rename interface name: echo &amp;lsquo;SUBSYSTEM==&amp;ldquo;net&amp;rdquo;, ACTION==&amp;ldquo;add&amp;rdquo;, DRIVERS==&amp;quot;?*&amp;quot;, ATTR{address}==&amp;ldquo;02:01:02:03:04:05&amp;rdquo;, ATTR{dev_id}==&amp;ldquo;0x0&amp;rdquo;, ATTR{type}==&amp;ldquo;1&amp;rdquo;, NAME=&amp;ldquo;wlx0&amp;rdquo;'|sudo tee -a /etc/udev/rules.d/70-persistent-net.rules 安装 sudo apt install aircrack-ng start monitor mode sudo airmon-ng start wlx0 [channel] #在信道channel上监听(mon0)，不指定信道全监听但不能用于aireplay sudo airodump-ng mon0 # 监听所有ESS sudo airodum-ng mon0 -c 1 &amp;ndash;bssid bssid #监听ESS下的station,得到mac sudo aireplay-ng -0 1000 -a 7E:F7:E6:C8:0B:E7 -c BC:83:85:EE:35:AB mon0 # 在mon0的信道上进行解关联解认证攻击 start</description></item><item><title>vscode远程编辑</title><link>https://mlyixi.github.io/post/linux/vscode%E8%BF%9C%E7%A8%8B%E7%BC%96%E8%BE%91/</link><pubDate>Sun, 30 Dec 2018 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/vscode%E8%BF%9C%E7%A8%8B%E7%BC%96%E8%BE%91/</guid><description>remote-ssh 微软官方出的remote-ssh用于连接远程服务器，进行远程编辑。 要求 服务端有openssh-server, 客户端有openssh-client.(win/linux/osx)其实都有了。 客户端上安装remote-ssh插件，左侧菜单栏多了个remote-explorer按钮；</description></item><item><title>Linux多网卡</title><link>https://mlyixi.github.io/post/linux/Linux%E5%A4%9A%E7%BD%91%E5%8D%A1/</link><pubDate>Tue, 04 Dec 2018 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/Linux%E5%A4%9A%E7%BD%91%E5%8D%A1/</guid><description>Linux多网卡问题 问题描述 对于多块网卡的电脑，一个使用场景就是：将该电脑视作多个独立的收发系统，但共享一个cpu(多任务OS)。但这对于linux默认是不成立的：linux是一个弱终端系统模型（Weak End System Model)，上述使用场景的OS是一个强终端系统模型(SESM)。 区别是</description></item><item><title>Linux下的nc</title><link>https://mlyixi.github.io/post/linux/Linux%E4%B8%8B%E7%9A%84nc/</link><pubDate>Sun, 04 Nov 2018 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/Linux%E4%B8%8B%E7%9A%84nc/</guid><description>nc nc(netcat)有多个类似的工具 netcat:原版,GNU,目前不支持ipv6 netcat.openbsd:openbsd上的netcat,支持ipv6,需要libbsd0 ncat:nmap项目中的改进,需要nbase,nsock,libpcap等库,支持ipv6 socat</description></item><item><title>ubuntu域名服务器</title><link>https://mlyixi.github.io/post/linux/ubuntu%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Thu, 30 Nov 2017 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/ubuntu%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>https://www.linuxtechi.com/install-configure-bind-9-dns-server-ubuntu-debian/</description></item><item><title>ubuntu时间服务器</title><link>https://mlyixi.github.io/post/linux/ubuntu%E6%97%B6%E9%97%B4%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Wed, 29 Nov 2017 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/ubuntu%E6%97%B6%E9%97%B4%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>ubuntu ntp服务器配置与同步 sudo apt install ntp 配置/etc/ntp.conf，如conf/ntp.conf所示 sudo systemctl restart ntp ubuntu ntp客户端配置 现在一般使用systemd-timesyncd与ntp服务器同步 配置/etc/systemd/timesyncd.conf中的NTP=192.168.10.1</description></item><item><title>ubuntu文档系统</title><link>https://mlyixi.github.io/post/linux/ubuntu%E6%96%87%E6%A1%A3%E7%B3%BB%E7%BB%9F/</link><pubDate>Wed, 30 Nov 2016 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/ubuntu%E6%96%87%E6%A1%A3%E7%B3%BB%E7%BB%9F/</guid><description>文档路径 系统apt安装的文档一般在/usr/share/doc下 源码编译的工程文档一般在/usr/local/share/doc下 如uhd, gnuradio man路径 /usr/share/man/ /usr/local/share/man user commands system calls C lib devices and special files file formats and conventions Games miscellanea system admin tools and daemons</description></item><item><title>开源软件列表</title><link>https://mlyixi.github.io/post/linux/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/</link><pubDate>Tue, 30 Dec 2014 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/</guid><description>世人都晓病毒多，杀毒软件少不了！ 国内杀软哪家好? 比来比去裸奔好! 在这个流氓遍地的国内互联网时代,打着名为免费实为平台/流量/渠道的软件们互相在撕逼大战. 所以各种流氓软件就莫名其妙地装在了我们的电脑上,动不动弹个窗,报个警啥的. 特别是杀毒软件和安全卫士等安全概念软件. 这些软件相较于</description></item><item><title>iproute包介绍</title><link>https://mlyixi.github.io/post/linux/iproute%E5%8C%85%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 08 Dec 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/iproute%E5%8C%85%E4%BB%8B%E7%BB%8D/</guid><description>你现在看的linux书籍是否还在介绍linux下用ifconfig,windows下用ipconfig查询ip,route查看路由？这完全out了。现在主流linux发行版一般不再默认安装这些unix上的net-tools了，而安装iproute2包。 iproute iproute提供了ip命</description></item><item><title>vimscript笔记</title><link>https://mlyixi.github.io/post/linux/vimscript%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 05 Dec 2014 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/vimscript%E7%AC%94%E8%AE%B0/</guid><description>用vim基本上就是熟悉各种按键(相信如五笔一样已经习惯),真正要用好它的话还得各种插件,插件多了后不自己手动改改就是各种冲突.所以最终,你得学会vimscript,至少各种概念要熟悉. 这里为笨方法学Vimscript的摘要 设置vim变量 全局 设置(set number),切换(set</description></item><item><title>Vim中的编码设置</title><link>https://mlyixi.github.io/post/linux/Vim%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E8%AE%BE%E7%BD%AE/</link><pubDate>Wed, 03 Dec 2014 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/Vim%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E8%AE%BE%E7%BD%AE/</guid><description>原理 Vim 有四个跟字符编码方式有关的选项，encoding、fileencoding、fileencodings、termencoding (这些选项可能的取值请参考 Vim 在线帮助 :help encoding-names)，它们的意义如下: encoding: Vim 内部使用的字符编码方式，包括 Vim 的 buffer (缓冲区)、菜单文本、</description></item><item><title>Archlinux网关安装与配置</title><link>https://mlyixi.github.io/post/linux/Archlinux%E7%BD%91%E5%85%B3%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 30 Nov 2014 14:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/Archlinux%E7%BD%91%E5%85%B3%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>Archlinux不是滚挂还是滚挂. 试着升级了一下网关(好久没更新了),尝试了pacdiff,不过我显然没有注意到问题所在,虽然还是可以启动,但是好多systemctl service是红的,网络也不行了(netcfg被netctl/networkd替换了),一些服务也不能启动了(</description></item><item><title>OSX下的PATH</title><link>https://mlyixi.github.io/post/osx/OS-X%E4%B8%8B%E7%9A%84PATH/</link><pubDate>Sat, 29 Nov 2014 18:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/osx/OS-X%E4%B8%8B%E7%9A%84PATH/</guid><description>如果你在OSX下使用跨平台的工具(git,macvim,zsh等),反正就是homebrew安装的,你可能已经发现一大堆源于PATH变量的奇怪问题了:我的vim用的好好的,怎么到了gvim就出错了呢? 全部问题来自于OS X想要解决PATH设置混乱的局面,采用了一个Path_help</description></item><item><title>vim-latex配置使用说明</title><link>https://mlyixi.github.io/post/linux/vim-latex%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link><pubDate>Sat, 29 Nov 2014 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/vim-latex%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid><description>前提 当然是安装了texlive 2014了. 安装 YADR的Vim插件中没有latex支持,所以得自己安装插件.一直用vim-latex suite,所以就安装了. 1 yav -u https://github.com/vim-latex/vim-latex 配置 然后在~/.vimrc.after中设置它的必须配置. PATH 习惯性在.zprofile中加入texlive的路径.</description></item><item><title>Linux防火墙2</title><link>https://mlyixi.github.io/post/linux/Linux%E9%98%B2%E7%81%AB%E5%A2%992/</link><pubDate>Sat, 04 Oct 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/Linux%E9%98%B2%E7%81%AB%E5%A2%992/</guid><description>在上一节我们提到,我们配置的防火墙可能已经在别人配置的防火墙内了. 即使自己设置了数据包全部通过的规则,数据包也可能在外层防火墙被滤掉了.那么如何扫描别人给我们开放的端口呢? 这里我们介绍nmap. 安装 osx: brew install nmap linux: 用你最喜欢的包管理安装吧 windows: zenmap 功能架构图 nmap功能架构图 主机发现(Hos</description></item><item><title>Linux防火墙1</title><link>https://mlyixi.github.io/post/linux/Linux%E9%98%B2%E7%81%AB%E5%A2%991/</link><pubDate>Thu, 25 Sep 2014 10:08:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/Linux%E9%98%B2%E7%81%AB%E5%A2%991/</guid><description>iptables与netfilter 经常混用,不过iptables指的是防火墙的管理工具而netfilter指的是linux实现防火墙的内核模块. iptables结构 表(Tables) 现在一般有5种内建表,Filter表, NAT表,Mangle表,Raw表和security表,分</description></item><item><title>KDE4下gtk程序很丑</title><link>https://mlyixi.github.io/post/linux/kde4%E4%B8%8Bgtk%E7%A8%8B%E5%BA%8F%E5%BE%88%E4%B8%91/</link><pubDate>Wed, 27 Aug 2014 10:11:52 +0800</pubDate><guid>https://mlyixi.github.io/post/linux/kde4%E4%B8%8Bgtk%E7%A8%8B%E5%BA%8F%E5%BE%88%E4%B8%91/</guid><description>gtk程序如chromium和eclipse,在kde下的按钮像是到了win95年代 查了一下,发现只要安装gtk-qt-engine,然后在系统设置中调整成qt.现在貌似得到AUR里去下载gtk-qt-enqine了.</description></item><item><title>ubuntu创建deb包</title><link>https://mlyixi.github.io/post/linux/ubuntu%E5%88%9B%E5%BB%BAdeb%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mlyixi.github.io/post/linux/ubuntu%E5%88%9B%E5%BB%BAdeb%E5%8C%85/</guid><description>工作中经常要自己编译源代码，对于大型开源工程，每安装一台电脑就要重新编译一下，即浪费时间又容易出问题（git代码总在更新）。 即然我是一个喜欢用archlinux而不喜欢gentoo的人，就很想找到即可以改源代码，又可以分发的方法，对，就是打包&amp;mdash;&amp;mdash;&amp;mdas</description></item></channel></rss>